// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/bborbe/k8s"
	v1 "k8s.io/client-go/kubernetes/typed/batch/v1"
	"k8s.io/client-go/rest"
)

type K8sBatchV1Interface struct {
	CronJobsStub        func(string) v1.CronJobInterface
	cronJobsMutex       sync.RWMutex
	cronJobsArgsForCall []struct {
		arg1 string
	}
	cronJobsReturns struct {
		result1 v1.CronJobInterface
	}
	cronJobsReturnsOnCall map[int]struct {
		result1 v1.CronJobInterface
	}
	JobsStub        func(string) v1.JobInterface
	jobsMutex       sync.RWMutex
	jobsArgsForCall []struct {
		arg1 string
	}
	jobsReturns struct {
		result1 v1.JobInterface
	}
	jobsReturnsOnCall map[int]struct {
		result1 v1.JobInterface
	}
	RESTClientStub        func() rest.Interface
	rESTClientMutex       sync.RWMutex
	rESTClientArgsForCall []struct {
	}
	rESTClientReturns struct {
		result1 rest.Interface
	}
	rESTClientReturnsOnCall map[int]struct {
		result1 rest.Interface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *K8sBatchV1Interface) CronJobs(arg1 string) v1.CronJobInterface {
	fake.cronJobsMutex.Lock()
	ret, specificReturn := fake.cronJobsReturnsOnCall[len(fake.cronJobsArgsForCall)]
	fake.cronJobsArgsForCall = append(fake.cronJobsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CronJobsStub
	fakeReturns := fake.cronJobsReturns
	fake.recordInvocation("CronJobs", []interface{}{arg1})
	fake.cronJobsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sBatchV1Interface) CronJobsCallCount() int {
	fake.cronJobsMutex.RLock()
	defer fake.cronJobsMutex.RUnlock()
	return len(fake.cronJobsArgsForCall)
}

func (fake *K8sBatchV1Interface) CronJobsCalls(stub func(string) v1.CronJobInterface) {
	fake.cronJobsMutex.Lock()
	defer fake.cronJobsMutex.Unlock()
	fake.CronJobsStub = stub
}

func (fake *K8sBatchV1Interface) CronJobsArgsForCall(i int) string {
	fake.cronJobsMutex.RLock()
	defer fake.cronJobsMutex.RUnlock()
	argsForCall := fake.cronJobsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sBatchV1Interface) CronJobsReturns(result1 v1.CronJobInterface) {
	fake.cronJobsMutex.Lock()
	defer fake.cronJobsMutex.Unlock()
	fake.CronJobsStub = nil
	fake.cronJobsReturns = struct {
		result1 v1.CronJobInterface
	}{result1}
}

func (fake *K8sBatchV1Interface) CronJobsReturnsOnCall(i int, result1 v1.CronJobInterface) {
	fake.cronJobsMutex.Lock()
	defer fake.cronJobsMutex.Unlock()
	fake.CronJobsStub = nil
	if fake.cronJobsReturnsOnCall == nil {
		fake.cronJobsReturnsOnCall = make(map[int]struct {
			result1 v1.CronJobInterface
		})
	}
	fake.cronJobsReturnsOnCall[i] = struct {
		result1 v1.CronJobInterface
	}{result1}
}

func (fake *K8sBatchV1Interface) Jobs(arg1 string) v1.JobInterface {
	fake.jobsMutex.Lock()
	ret, specificReturn := fake.jobsReturnsOnCall[len(fake.jobsArgsForCall)]
	fake.jobsArgsForCall = append(fake.jobsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.JobsStub
	fakeReturns := fake.jobsReturns
	fake.recordInvocation("Jobs", []interface{}{arg1})
	fake.jobsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sBatchV1Interface) JobsCallCount() int {
	fake.jobsMutex.RLock()
	defer fake.jobsMutex.RUnlock()
	return len(fake.jobsArgsForCall)
}

func (fake *K8sBatchV1Interface) JobsCalls(stub func(string) v1.JobInterface) {
	fake.jobsMutex.Lock()
	defer fake.jobsMutex.Unlock()
	fake.JobsStub = stub
}

func (fake *K8sBatchV1Interface) JobsArgsForCall(i int) string {
	fake.jobsMutex.RLock()
	defer fake.jobsMutex.RUnlock()
	argsForCall := fake.jobsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sBatchV1Interface) JobsReturns(result1 v1.JobInterface) {
	fake.jobsMutex.Lock()
	defer fake.jobsMutex.Unlock()
	fake.JobsStub = nil
	fake.jobsReturns = struct {
		result1 v1.JobInterface
	}{result1}
}

func (fake *K8sBatchV1Interface) JobsReturnsOnCall(i int, result1 v1.JobInterface) {
	fake.jobsMutex.Lock()
	defer fake.jobsMutex.Unlock()
	fake.JobsStub = nil
	if fake.jobsReturnsOnCall == nil {
		fake.jobsReturnsOnCall = make(map[int]struct {
			result1 v1.JobInterface
		})
	}
	fake.jobsReturnsOnCall[i] = struct {
		result1 v1.JobInterface
	}{result1}
}

func (fake *K8sBatchV1Interface) RESTClient() rest.Interface {
	fake.rESTClientMutex.Lock()
	ret, specificReturn := fake.rESTClientReturnsOnCall[len(fake.rESTClientArgsForCall)]
	fake.rESTClientArgsForCall = append(fake.rESTClientArgsForCall, struct {
	}{})
	stub := fake.RESTClientStub
	fakeReturns := fake.rESTClientReturns
	fake.recordInvocation("RESTClient", []interface{}{})
	fake.rESTClientMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sBatchV1Interface) RESTClientCallCount() int {
	fake.rESTClientMutex.RLock()
	defer fake.rESTClientMutex.RUnlock()
	return len(fake.rESTClientArgsForCall)
}

func (fake *K8sBatchV1Interface) RESTClientCalls(stub func() rest.Interface) {
	fake.rESTClientMutex.Lock()
	defer fake.rESTClientMutex.Unlock()
	fake.RESTClientStub = stub
}

func (fake *K8sBatchV1Interface) RESTClientReturns(result1 rest.Interface) {
	fake.rESTClientMutex.Lock()
	defer fake.rESTClientMutex.Unlock()
	fake.RESTClientStub = nil
	fake.rESTClientReturns = struct {
		result1 rest.Interface
	}{result1}
}

func (fake *K8sBatchV1Interface) RESTClientReturnsOnCall(i int, result1 rest.Interface) {
	fake.rESTClientMutex.Lock()
	defer fake.rESTClientMutex.Unlock()
	fake.RESTClientStub = nil
	if fake.rESTClientReturnsOnCall == nil {
		fake.rESTClientReturnsOnCall = make(map[int]struct {
			result1 rest.Interface
		})
	}
	fake.rESTClientReturnsOnCall[i] = struct {
		result1 rest.Interface
	}{result1}
}

func (fake *K8sBatchV1Interface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cronJobsMutex.RLock()
	defer fake.cronJobsMutex.RUnlock()
	fake.jobsMutex.RLock()
	defer fake.jobsMutex.RUnlock()
	fake.rESTClientMutex.RLock()
	defer fake.rESTClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *K8sBatchV1Interface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.BatchV1Interface = new(K8sBatchV1Interface)
