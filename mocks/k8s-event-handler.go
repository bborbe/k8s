// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/k8s"
)

type EventHandler[T k8s.Type] struct {
	GetStub        func(context.Context) ([]T, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
	}
	getReturns struct {
		result1 []T
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 []T
		result2 error
	}
	OnAddStub        func(context.Context, T) error
	onAddMutex       sync.RWMutex
	onAddArgsForCall []struct {
		arg1 context.Context
		arg2 T
	}
	onAddReturns struct {
		result1 error
	}
	onAddReturnsOnCall map[int]struct {
		result1 error
	}
	OnDeleteStub        func(context.Context, T) error
	onDeleteMutex       sync.RWMutex
	onDeleteArgsForCall []struct {
		arg1 context.Context
		arg2 T
	}
	onDeleteReturns struct {
		result1 error
	}
	onDeleteReturnsOnCall map[int]struct {
		result1 error
	}
	OnUpdateStub        func(context.Context, T, T) error
	onUpdateMutex       sync.RWMutex
	onUpdateArgsForCall []struct {
		arg1 context.Context
		arg2 T
		arg3 T
	}
	onUpdateReturns struct {
		result1 error
	}
	onUpdateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EventHandler[T]) Get(arg1 context.Context) ([]T, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *EventHandler[T]) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *EventHandler[T]) GetCalls(stub func(context.Context) ([]T, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *EventHandler[T]) GetArgsForCall(i int) context.Context {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *EventHandler[T]) GetReturns(result1 []T, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 []T
		result2 error
	}{result1, result2}
}

func (fake *EventHandler[T]) GetReturnsOnCall(i int, result1 []T, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 []T
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 []T
		result2 error
	}{result1, result2}
}

func (fake *EventHandler[T]) OnAdd(arg1 context.Context, arg2 T) error {
	fake.onAddMutex.Lock()
	ret, specificReturn := fake.onAddReturnsOnCall[len(fake.onAddArgsForCall)]
	fake.onAddArgsForCall = append(fake.onAddArgsForCall, struct {
		arg1 context.Context
		arg2 T
	}{arg1, arg2})
	stub := fake.OnAddStub
	fakeReturns := fake.onAddReturns
	fake.recordInvocation("OnAdd", []interface{}{arg1, arg2})
	fake.onAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *EventHandler[T]) OnAddCallCount() int {
	fake.onAddMutex.RLock()
	defer fake.onAddMutex.RUnlock()
	return len(fake.onAddArgsForCall)
}

func (fake *EventHandler[T]) OnAddCalls(stub func(context.Context, T) error) {
	fake.onAddMutex.Lock()
	defer fake.onAddMutex.Unlock()
	fake.OnAddStub = stub
}

func (fake *EventHandler[T]) OnAddArgsForCall(i int) (context.Context, T) {
	fake.onAddMutex.RLock()
	defer fake.onAddMutex.RUnlock()
	argsForCall := fake.onAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *EventHandler[T]) OnAddReturns(result1 error) {
	fake.onAddMutex.Lock()
	defer fake.onAddMutex.Unlock()
	fake.OnAddStub = nil
	fake.onAddReturns = struct {
		result1 error
	}{result1}
}

func (fake *EventHandler[T]) OnAddReturnsOnCall(i int, result1 error) {
	fake.onAddMutex.Lock()
	defer fake.onAddMutex.Unlock()
	fake.OnAddStub = nil
	if fake.onAddReturnsOnCall == nil {
		fake.onAddReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.onAddReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EventHandler[T]) OnDelete(arg1 context.Context, arg2 T) error {
	fake.onDeleteMutex.Lock()
	ret, specificReturn := fake.onDeleteReturnsOnCall[len(fake.onDeleteArgsForCall)]
	fake.onDeleteArgsForCall = append(fake.onDeleteArgsForCall, struct {
		arg1 context.Context
		arg2 T
	}{arg1, arg2})
	stub := fake.OnDeleteStub
	fakeReturns := fake.onDeleteReturns
	fake.recordInvocation("OnDelete", []interface{}{arg1, arg2})
	fake.onDeleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *EventHandler[T]) OnDeleteCallCount() int {
	fake.onDeleteMutex.RLock()
	defer fake.onDeleteMutex.RUnlock()
	return len(fake.onDeleteArgsForCall)
}

func (fake *EventHandler[T]) OnDeleteCalls(stub func(context.Context, T) error) {
	fake.onDeleteMutex.Lock()
	defer fake.onDeleteMutex.Unlock()
	fake.OnDeleteStub = stub
}

func (fake *EventHandler[T]) OnDeleteArgsForCall(i int) (context.Context, T) {
	fake.onDeleteMutex.RLock()
	defer fake.onDeleteMutex.RUnlock()
	argsForCall := fake.onDeleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *EventHandler[T]) OnDeleteReturns(result1 error) {
	fake.onDeleteMutex.Lock()
	defer fake.onDeleteMutex.Unlock()
	fake.OnDeleteStub = nil
	fake.onDeleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *EventHandler[T]) OnDeleteReturnsOnCall(i int, result1 error) {
	fake.onDeleteMutex.Lock()
	defer fake.onDeleteMutex.Unlock()
	fake.OnDeleteStub = nil
	if fake.onDeleteReturnsOnCall == nil {
		fake.onDeleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.onDeleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EventHandler[T]) OnUpdate(arg1 context.Context, arg2 T, arg3 T) error {
	fake.onUpdateMutex.Lock()
	ret, specificReturn := fake.onUpdateReturnsOnCall[len(fake.onUpdateArgsForCall)]
	fake.onUpdateArgsForCall = append(fake.onUpdateArgsForCall, struct {
		arg1 context.Context
		arg2 T
		arg3 T
	}{arg1, arg2, arg3})
	stub := fake.OnUpdateStub
	fakeReturns := fake.onUpdateReturns
	fake.recordInvocation("OnUpdate", []interface{}{arg1, arg2, arg3})
	fake.onUpdateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *EventHandler[T]) OnUpdateCallCount() int {
	fake.onUpdateMutex.RLock()
	defer fake.onUpdateMutex.RUnlock()
	return len(fake.onUpdateArgsForCall)
}

func (fake *EventHandler[T]) OnUpdateCalls(stub func(context.Context, T, T) error) {
	fake.onUpdateMutex.Lock()
	defer fake.onUpdateMutex.Unlock()
	fake.OnUpdateStub = stub
}

func (fake *EventHandler[T]) OnUpdateArgsForCall(i int) (context.Context, T, T) {
	fake.onUpdateMutex.RLock()
	defer fake.onUpdateMutex.RUnlock()
	argsForCall := fake.onUpdateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *EventHandler[T]) OnUpdateReturns(result1 error) {
	fake.onUpdateMutex.Lock()
	defer fake.onUpdateMutex.Unlock()
	fake.OnUpdateStub = nil
	fake.onUpdateReturns = struct {
		result1 error
	}{result1}
}

func (fake *EventHandler[T]) OnUpdateReturnsOnCall(i int, result1 error) {
	fake.onUpdateMutex.Lock()
	defer fake.onUpdateMutex.Unlock()
	fake.OnUpdateStub = nil
	if fake.onUpdateReturnsOnCall == nil {
		fake.onUpdateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.onUpdateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EventHandler[T]) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *EventHandler[T]) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.EventHandler[k8s.Type] = new(EventHandler[k8s.Type])
