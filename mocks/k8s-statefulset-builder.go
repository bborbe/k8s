// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/k8s"
	v1a "k8s.io/api/apps/v1"
	v1 "k8s.io/api/core/v1"
)

type K8sStatefulSetBuilder struct {
	AddImagePullSecretsStub        func(...string) k8s.StatefulSetBuilder
	addImagePullSecretsMutex       sync.RWMutex
	addImagePullSecretsArgsForCall []struct {
		arg1 []string
	}
	addImagePullSecretsReturns struct {
		result1 k8s.StatefulSetBuilder
	}
	addImagePullSecretsReturnsOnCall map[int]struct {
		result1 k8s.StatefulSetBuilder
	}
	AddLabelStub        func(string, string) k8s.StatefulSetBuilder
	addLabelMutex       sync.RWMutex
	addLabelArgsForCall []struct {
		arg1 string
		arg2 string
	}
	addLabelReturns struct {
		result1 k8s.StatefulSetBuilder
	}
	addLabelReturnsOnCall map[int]struct {
		result1 k8s.StatefulSetBuilder
	}
	AddVolumesStub        func(...v1.Volume) k8s.StatefulSetBuilder
	addVolumesMutex       sync.RWMutex
	addVolumesArgsForCall []struct {
		arg1 []v1.Volume
	}
	addVolumesReturns struct {
		result1 k8s.StatefulSetBuilder
	}
	addVolumesReturnsOnCall map[int]struct {
		result1 k8s.StatefulSetBuilder
	}
	BuildStub        func(context.Context) (*v1a.StatefulSet, error)
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		arg1 context.Context
	}
	buildReturns struct {
		result1 *v1a.StatefulSet
		result2 error
	}
	buildReturnsOnCall map[int]struct {
		result1 *v1a.StatefulSet
		result2 error
	}
	SetAffinityStub        func(v1.Affinity) k8s.StatefulSetBuilder
	setAffinityMutex       sync.RWMutex
	setAffinityArgsForCall []struct {
		arg1 v1.Affinity
	}
	setAffinityReturns struct {
		result1 k8s.StatefulSetBuilder
	}
	setAffinityReturnsOnCall map[int]struct {
		result1 k8s.StatefulSetBuilder
	}
	SetContainersBuilderStub        func(k8s.ContainersBuilder) k8s.StatefulSetBuilder
	setContainersBuilderMutex       sync.RWMutex
	setContainersBuilderArgsForCall []struct {
		arg1 k8s.ContainersBuilder
	}
	setContainersBuilderReturns struct {
		result1 k8s.StatefulSetBuilder
	}
	setContainersBuilderReturnsOnCall map[int]struct {
		result1 k8s.StatefulSetBuilder
	}
	SetDatadirSizeStub        func(string) k8s.StatefulSetBuilder
	setDatadirSizeMutex       sync.RWMutex
	setDatadirSizeArgsForCall []struct {
		arg1 string
	}
	setDatadirSizeReturns struct {
		result1 k8s.StatefulSetBuilder
	}
	setDatadirSizeReturnsOnCall map[int]struct {
		result1 k8s.StatefulSetBuilder
	}
	SetImagePullSecretsStub        func([]string) k8s.StatefulSetBuilder
	setImagePullSecretsMutex       sync.RWMutex
	setImagePullSecretsArgsForCall []struct {
		arg1 []string
	}
	setImagePullSecretsReturns struct {
		result1 k8s.StatefulSetBuilder
	}
	setImagePullSecretsReturnsOnCall map[int]struct {
		result1 k8s.StatefulSetBuilder
	}
	SetNameStub        func(k8s.Name) k8s.StatefulSetBuilder
	setNameMutex       sync.RWMutex
	setNameArgsForCall []struct {
		arg1 k8s.Name
	}
	setNameReturns struct {
		result1 k8s.StatefulSetBuilder
	}
	setNameReturnsOnCall map[int]struct {
		result1 k8s.StatefulSetBuilder
	}
	SetObjectMetaBuilderStub        func(k8s.ObjectMetaBuilder) k8s.StatefulSetBuilder
	setObjectMetaBuilderMutex       sync.RWMutex
	setObjectMetaBuilderArgsForCall []struct {
		arg1 k8s.ObjectMetaBuilder
	}
	setObjectMetaBuilderReturns struct {
		result1 k8s.StatefulSetBuilder
	}
	setObjectMetaBuilderReturnsOnCall map[int]struct {
		result1 k8s.StatefulSetBuilder
	}
	SetReplicasStub        func(int32) k8s.StatefulSetBuilder
	setReplicasMutex       sync.RWMutex
	setReplicasArgsForCall []struct {
		arg1 int32
	}
	setReplicasReturns struct {
		result1 k8s.StatefulSetBuilder
	}
	setReplicasReturnsOnCall map[int]struct {
		result1 k8s.StatefulSetBuilder
	}
	SetStorageClassStub        func(string) k8s.StatefulSetBuilder
	setStorageClassMutex       sync.RWMutex
	setStorageClassArgsForCall []struct {
		arg1 string
	}
	setStorageClassReturns struct {
		result1 k8s.StatefulSetBuilder
	}
	setStorageClassReturnsOnCall map[int]struct {
		result1 k8s.StatefulSetBuilder
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *K8sStatefulSetBuilder) AddImagePullSecrets(arg1 ...string) k8s.StatefulSetBuilder {
	fake.addImagePullSecretsMutex.Lock()
	ret, specificReturn := fake.addImagePullSecretsReturnsOnCall[len(fake.addImagePullSecretsArgsForCall)]
	fake.addImagePullSecretsArgsForCall = append(fake.addImagePullSecretsArgsForCall, struct {
		arg1 []string
	}{arg1})
	stub := fake.AddImagePullSecretsStub
	fakeReturns := fake.addImagePullSecretsReturns
	fake.recordInvocation("AddImagePullSecrets", []interface{}{arg1})
	fake.addImagePullSecretsMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sStatefulSetBuilder) AddImagePullSecretsCallCount() int {
	fake.addImagePullSecretsMutex.RLock()
	defer fake.addImagePullSecretsMutex.RUnlock()
	return len(fake.addImagePullSecretsArgsForCall)
}

func (fake *K8sStatefulSetBuilder) AddImagePullSecretsCalls(stub func(...string) k8s.StatefulSetBuilder) {
	fake.addImagePullSecretsMutex.Lock()
	defer fake.addImagePullSecretsMutex.Unlock()
	fake.AddImagePullSecretsStub = stub
}

func (fake *K8sStatefulSetBuilder) AddImagePullSecretsArgsForCall(i int) []string {
	fake.addImagePullSecretsMutex.RLock()
	defer fake.addImagePullSecretsMutex.RUnlock()
	argsForCall := fake.addImagePullSecretsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sStatefulSetBuilder) AddImagePullSecretsReturns(result1 k8s.StatefulSetBuilder) {
	fake.addImagePullSecretsMutex.Lock()
	defer fake.addImagePullSecretsMutex.Unlock()
	fake.AddImagePullSecretsStub = nil
	fake.addImagePullSecretsReturns = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) AddImagePullSecretsReturnsOnCall(i int, result1 k8s.StatefulSetBuilder) {
	fake.addImagePullSecretsMutex.Lock()
	defer fake.addImagePullSecretsMutex.Unlock()
	fake.AddImagePullSecretsStub = nil
	if fake.addImagePullSecretsReturnsOnCall == nil {
		fake.addImagePullSecretsReturnsOnCall = make(map[int]struct {
			result1 k8s.StatefulSetBuilder
		})
	}
	fake.addImagePullSecretsReturnsOnCall[i] = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) AddLabel(arg1 string, arg2 string) k8s.StatefulSetBuilder {
	fake.addLabelMutex.Lock()
	ret, specificReturn := fake.addLabelReturnsOnCall[len(fake.addLabelArgsForCall)]
	fake.addLabelArgsForCall = append(fake.addLabelArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.AddLabelStub
	fakeReturns := fake.addLabelReturns
	fake.recordInvocation("AddLabel", []interface{}{arg1, arg2})
	fake.addLabelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sStatefulSetBuilder) AddLabelCallCount() int {
	fake.addLabelMutex.RLock()
	defer fake.addLabelMutex.RUnlock()
	return len(fake.addLabelArgsForCall)
}

func (fake *K8sStatefulSetBuilder) AddLabelCalls(stub func(string, string) k8s.StatefulSetBuilder) {
	fake.addLabelMutex.Lock()
	defer fake.addLabelMutex.Unlock()
	fake.AddLabelStub = stub
}

func (fake *K8sStatefulSetBuilder) AddLabelArgsForCall(i int) (string, string) {
	fake.addLabelMutex.RLock()
	defer fake.addLabelMutex.RUnlock()
	argsForCall := fake.addLabelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *K8sStatefulSetBuilder) AddLabelReturns(result1 k8s.StatefulSetBuilder) {
	fake.addLabelMutex.Lock()
	defer fake.addLabelMutex.Unlock()
	fake.AddLabelStub = nil
	fake.addLabelReturns = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) AddLabelReturnsOnCall(i int, result1 k8s.StatefulSetBuilder) {
	fake.addLabelMutex.Lock()
	defer fake.addLabelMutex.Unlock()
	fake.AddLabelStub = nil
	if fake.addLabelReturnsOnCall == nil {
		fake.addLabelReturnsOnCall = make(map[int]struct {
			result1 k8s.StatefulSetBuilder
		})
	}
	fake.addLabelReturnsOnCall[i] = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) AddVolumes(arg1 ...v1.Volume) k8s.StatefulSetBuilder {
	fake.addVolumesMutex.Lock()
	ret, specificReturn := fake.addVolumesReturnsOnCall[len(fake.addVolumesArgsForCall)]
	fake.addVolumesArgsForCall = append(fake.addVolumesArgsForCall, struct {
		arg1 []v1.Volume
	}{arg1})
	stub := fake.AddVolumesStub
	fakeReturns := fake.addVolumesReturns
	fake.recordInvocation("AddVolumes", []interface{}{arg1})
	fake.addVolumesMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sStatefulSetBuilder) AddVolumesCallCount() int {
	fake.addVolumesMutex.RLock()
	defer fake.addVolumesMutex.RUnlock()
	return len(fake.addVolumesArgsForCall)
}

func (fake *K8sStatefulSetBuilder) AddVolumesCalls(stub func(...v1.Volume) k8s.StatefulSetBuilder) {
	fake.addVolumesMutex.Lock()
	defer fake.addVolumesMutex.Unlock()
	fake.AddVolumesStub = stub
}

func (fake *K8sStatefulSetBuilder) AddVolumesArgsForCall(i int) []v1.Volume {
	fake.addVolumesMutex.RLock()
	defer fake.addVolumesMutex.RUnlock()
	argsForCall := fake.addVolumesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sStatefulSetBuilder) AddVolumesReturns(result1 k8s.StatefulSetBuilder) {
	fake.addVolumesMutex.Lock()
	defer fake.addVolumesMutex.Unlock()
	fake.AddVolumesStub = nil
	fake.addVolumesReturns = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) AddVolumesReturnsOnCall(i int, result1 k8s.StatefulSetBuilder) {
	fake.addVolumesMutex.Lock()
	defer fake.addVolumesMutex.Unlock()
	fake.AddVolumesStub = nil
	if fake.addVolumesReturnsOnCall == nil {
		fake.addVolumesReturnsOnCall = make(map[int]struct {
			result1 k8s.StatefulSetBuilder
		})
	}
	fake.addVolumesReturnsOnCall[i] = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) Build(arg1 context.Context) (*v1a.StatefulSet, error) {
	fake.buildMutex.Lock()
	ret, specificReturn := fake.buildReturnsOnCall[len(fake.buildArgsForCall)]
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.BuildStub
	fakeReturns := fake.buildReturns
	fake.recordInvocation("Build", []interface{}{arg1})
	fake.buildMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *K8sStatefulSetBuilder) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *K8sStatefulSetBuilder) BuildCalls(stub func(context.Context) (*v1a.StatefulSet, error)) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = stub
}

func (fake *K8sStatefulSetBuilder) BuildArgsForCall(i int) context.Context {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	argsForCall := fake.buildArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sStatefulSetBuilder) BuildReturns(result1 *v1a.StatefulSet, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 *v1a.StatefulSet
		result2 error
	}{result1, result2}
}

func (fake *K8sStatefulSetBuilder) BuildReturnsOnCall(i int, result1 *v1a.StatefulSet, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	if fake.buildReturnsOnCall == nil {
		fake.buildReturnsOnCall = make(map[int]struct {
			result1 *v1a.StatefulSet
			result2 error
		})
	}
	fake.buildReturnsOnCall[i] = struct {
		result1 *v1a.StatefulSet
		result2 error
	}{result1, result2}
}

func (fake *K8sStatefulSetBuilder) SetAffinity(arg1 v1.Affinity) k8s.StatefulSetBuilder {
	fake.setAffinityMutex.Lock()
	ret, specificReturn := fake.setAffinityReturnsOnCall[len(fake.setAffinityArgsForCall)]
	fake.setAffinityArgsForCall = append(fake.setAffinityArgsForCall, struct {
		arg1 v1.Affinity
	}{arg1})
	stub := fake.SetAffinityStub
	fakeReturns := fake.setAffinityReturns
	fake.recordInvocation("SetAffinity", []interface{}{arg1})
	fake.setAffinityMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sStatefulSetBuilder) SetAffinityCallCount() int {
	fake.setAffinityMutex.RLock()
	defer fake.setAffinityMutex.RUnlock()
	return len(fake.setAffinityArgsForCall)
}

func (fake *K8sStatefulSetBuilder) SetAffinityCalls(stub func(v1.Affinity) k8s.StatefulSetBuilder) {
	fake.setAffinityMutex.Lock()
	defer fake.setAffinityMutex.Unlock()
	fake.SetAffinityStub = stub
}

func (fake *K8sStatefulSetBuilder) SetAffinityArgsForCall(i int) v1.Affinity {
	fake.setAffinityMutex.RLock()
	defer fake.setAffinityMutex.RUnlock()
	argsForCall := fake.setAffinityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sStatefulSetBuilder) SetAffinityReturns(result1 k8s.StatefulSetBuilder) {
	fake.setAffinityMutex.Lock()
	defer fake.setAffinityMutex.Unlock()
	fake.SetAffinityStub = nil
	fake.setAffinityReturns = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) SetAffinityReturnsOnCall(i int, result1 k8s.StatefulSetBuilder) {
	fake.setAffinityMutex.Lock()
	defer fake.setAffinityMutex.Unlock()
	fake.SetAffinityStub = nil
	if fake.setAffinityReturnsOnCall == nil {
		fake.setAffinityReturnsOnCall = make(map[int]struct {
			result1 k8s.StatefulSetBuilder
		})
	}
	fake.setAffinityReturnsOnCall[i] = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) SetContainersBuilder(arg1 k8s.ContainersBuilder) k8s.StatefulSetBuilder {
	fake.setContainersBuilderMutex.Lock()
	ret, specificReturn := fake.setContainersBuilderReturnsOnCall[len(fake.setContainersBuilderArgsForCall)]
	fake.setContainersBuilderArgsForCall = append(fake.setContainersBuilderArgsForCall, struct {
		arg1 k8s.ContainersBuilder
	}{arg1})
	stub := fake.SetContainersBuilderStub
	fakeReturns := fake.setContainersBuilderReturns
	fake.recordInvocation("SetContainersBuilder", []interface{}{arg1})
	fake.setContainersBuilderMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sStatefulSetBuilder) SetContainersBuilderCallCount() int {
	fake.setContainersBuilderMutex.RLock()
	defer fake.setContainersBuilderMutex.RUnlock()
	return len(fake.setContainersBuilderArgsForCall)
}

func (fake *K8sStatefulSetBuilder) SetContainersBuilderCalls(stub func(k8s.ContainersBuilder) k8s.StatefulSetBuilder) {
	fake.setContainersBuilderMutex.Lock()
	defer fake.setContainersBuilderMutex.Unlock()
	fake.SetContainersBuilderStub = stub
}

func (fake *K8sStatefulSetBuilder) SetContainersBuilderArgsForCall(i int) k8s.ContainersBuilder {
	fake.setContainersBuilderMutex.RLock()
	defer fake.setContainersBuilderMutex.RUnlock()
	argsForCall := fake.setContainersBuilderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sStatefulSetBuilder) SetContainersBuilderReturns(result1 k8s.StatefulSetBuilder) {
	fake.setContainersBuilderMutex.Lock()
	defer fake.setContainersBuilderMutex.Unlock()
	fake.SetContainersBuilderStub = nil
	fake.setContainersBuilderReturns = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) SetContainersBuilderReturnsOnCall(i int, result1 k8s.StatefulSetBuilder) {
	fake.setContainersBuilderMutex.Lock()
	defer fake.setContainersBuilderMutex.Unlock()
	fake.SetContainersBuilderStub = nil
	if fake.setContainersBuilderReturnsOnCall == nil {
		fake.setContainersBuilderReturnsOnCall = make(map[int]struct {
			result1 k8s.StatefulSetBuilder
		})
	}
	fake.setContainersBuilderReturnsOnCall[i] = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) SetDatadirSize(arg1 string) k8s.StatefulSetBuilder {
	fake.setDatadirSizeMutex.Lock()
	ret, specificReturn := fake.setDatadirSizeReturnsOnCall[len(fake.setDatadirSizeArgsForCall)]
	fake.setDatadirSizeArgsForCall = append(fake.setDatadirSizeArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetDatadirSizeStub
	fakeReturns := fake.setDatadirSizeReturns
	fake.recordInvocation("SetDatadirSize", []interface{}{arg1})
	fake.setDatadirSizeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sStatefulSetBuilder) SetDatadirSizeCallCount() int {
	fake.setDatadirSizeMutex.RLock()
	defer fake.setDatadirSizeMutex.RUnlock()
	return len(fake.setDatadirSizeArgsForCall)
}

func (fake *K8sStatefulSetBuilder) SetDatadirSizeCalls(stub func(string) k8s.StatefulSetBuilder) {
	fake.setDatadirSizeMutex.Lock()
	defer fake.setDatadirSizeMutex.Unlock()
	fake.SetDatadirSizeStub = stub
}

func (fake *K8sStatefulSetBuilder) SetDatadirSizeArgsForCall(i int) string {
	fake.setDatadirSizeMutex.RLock()
	defer fake.setDatadirSizeMutex.RUnlock()
	argsForCall := fake.setDatadirSizeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sStatefulSetBuilder) SetDatadirSizeReturns(result1 k8s.StatefulSetBuilder) {
	fake.setDatadirSizeMutex.Lock()
	defer fake.setDatadirSizeMutex.Unlock()
	fake.SetDatadirSizeStub = nil
	fake.setDatadirSizeReturns = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) SetDatadirSizeReturnsOnCall(i int, result1 k8s.StatefulSetBuilder) {
	fake.setDatadirSizeMutex.Lock()
	defer fake.setDatadirSizeMutex.Unlock()
	fake.SetDatadirSizeStub = nil
	if fake.setDatadirSizeReturnsOnCall == nil {
		fake.setDatadirSizeReturnsOnCall = make(map[int]struct {
			result1 k8s.StatefulSetBuilder
		})
	}
	fake.setDatadirSizeReturnsOnCall[i] = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) SetImagePullSecrets(arg1 []string) k8s.StatefulSetBuilder {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.setImagePullSecretsMutex.Lock()
	ret, specificReturn := fake.setImagePullSecretsReturnsOnCall[len(fake.setImagePullSecretsArgsForCall)]
	fake.setImagePullSecretsArgsForCall = append(fake.setImagePullSecretsArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.SetImagePullSecretsStub
	fakeReturns := fake.setImagePullSecretsReturns
	fake.recordInvocation("SetImagePullSecrets", []interface{}{arg1Copy})
	fake.setImagePullSecretsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sStatefulSetBuilder) SetImagePullSecretsCallCount() int {
	fake.setImagePullSecretsMutex.RLock()
	defer fake.setImagePullSecretsMutex.RUnlock()
	return len(fake.setImagePullSecretsArgsForCall)
}

func (fake *K8sStatefulSetBuilder) SetImagePullSecretsCalls(stub func([]string) k8s.StatefulSetBuilder) {
	fake.setImagePullSecretsMutex.Lock()
	defer fake.setImagePullSecretsMutex.Unlock()
	fake.SetImagePullSecretsStub = stub
}

func (fake *K8sStatefulSetBuilder) SetImagePullSecretsArgsForCall(i int) []string {
	fake.setImagePullSecretsMutex.RLock()
	defer fake.setImagePullSecretsMutex.RUnlock()
	argsForCall := fake.setImagePullSecretsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sStatefulSetBuilder) SetImagePullSecretsReturns(result1 k8s.StatefulSetBuilder) {
	fake.setImagePullSecretsMutex.Lock()
	defer fake.setImagePullSecretsMutex.Unlock()
	fake.SetImagePullSecretsStub = nil
	fake.setImagePullSecretsReturns = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) SetImagePullSecretsReturnsOnCall(i int, result1 k8s.StatefulSetBuilder) {
	fake.setImagePullSecretsMutex.Lock()
	defer fake.setImagePullSecretsMutex.Unlock()
	fake.SetImagePullSecretsStub = nil
	if fake.setImagePullSecretsReturnsOnCall == nil {
		fake.setImagePullSecretsReturnsOnCall = make(map[int]struct {
			result1 k8s.StatefulSetBuilder
		})
	}
	fake.setImagePullSecretsReturnsOnCall[i] = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) SetName(arg1 k8s.Name) k8s.StatefulSetBuilder {
	fake.setNameMutex.Lock()
	ret, specificReturn := fake.setNameReturnsOnCall[len(fake.setNameArgsForCall)]
	fake.setNameArgsForCall = append(fake.setNameArgsForCall, struct {
		arg1 k8s.Name
	}{arg1})
	stub := fake.SetNameStub
	fakeReturns := fake.setNameReturns
	fake.recordInvocation("SetName", []interface{}{arg1})
	fake.setNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sStatefulSetBuilder) SetNameCallCount() int {
	fake.setNameMutex.RLock()
	defer fake.setNameMutex.RUnlock()
	return len(fake.setNameArgsForCall)
}

func (fake *K8sStatefulSetBuilder) SetNameCalls(stub func(k8s.Name) k8s.StatefulSetBuilder) {
	fake.setNameMutex.Lock()
	defer fake.setNameMutex.Unlock()
	fake.SetNameStub = stub
}

func (fake *K8sStatefulSetBuilder) SetNameArgsForCall(i int) k8s.Name {
	fake.setNameMutex.RLock()
	defer fake.setNameMutex.RUnlock()
	argsForCall := fake.setNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sStatefulSetBuilder) SetNameReturns(result1 k8s.StatefulSetBuilder) {
	fake.setNameMutex.Lock()
	defer fake.setNameMutex.Unlock()
	fake.SetNameStub = nil
	fake.setNameReturns = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) SetNameReturnsOnCall(i int, result1 k8s.StatefulSetBuilder) {
	fake.setNameMutex.Lock()
	defer fake.setNameMutex.Unlock()
	fake.SetNameStub = nil
	if fake.setNameReturnsOnCall == nil {
		fake.setNameReturnsOnCall = make(map[int]struct {
			result1 k8s.StatefulSetBuilder
		})
	}
	fake.setNameReturnsOnCall[i] = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) SetObjectMetaBuilder(arg1 k8s.ObjectMetaBuilder) k8s.StatefulSetBuilder {
	fake.setObjectMetaBuilderMutex.Lock()
	ret, specificReturn := fake.setObjectMetaBuilderReturnsOnCall[len(fake.setObjectMetaBuilderArgsForCall)]
	fake.setObjectMetaBuilderArgsForCall = append(fake.setObjectMetaBuilderArgsForCall, struct {
		arg1 k8s.ObjectMetaBuilder
	}{arg1})
	stub := fake.SetObjectMetaBuilderStub
	fakeReturns := fake.setObjectMetaBuilderReturns
	fake.recordInvocation("SetObjectMetaBuilder", []interface{}{arg1})
	fake.setObjectMetaBuilderMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sStatefulSetBuilder) SetObjectMetaBuilderCallCount() int {
	fake.setObjectMetaBuilderMutex.RLock()
	defer fake.setObjectMetaBuilderMutex.RUnlock()
	return len(fake.setObjectMetaBuilderArgsForCall)
}

func (fake *K8sStatefulSetBuilder) SetObjectMetaBuilderCalls(stub func(k8s.ObjectMetaBuilder) k8s.StatefulSetBuilder) {
	fake.setObjectMetaBuilderMutex.Lock()
	defer fake.setObjectMetaBuilderMutex.Unlock()
	fake.SetObjectMetaBuilderStub = stub
}

func (fake *K8sStatefulSetBuilder) SetObjectMetaBuilderArgsForCall(i int) k8s.ObjectMetaBuilder {
	fake.setObjectMetaBuilderMutex.RLock()
	defer fake.setObjectMetaBuilderMutex.RUnlock()
	argsForCall := fake.setObjectMetaBuilderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sStatefulSetBuilder) SetObjectMetaBuilderReturns(result1 k8s.StatefulSetBuilder) {
	fake.setObjectMetaBuilderMutex.Lock()
	defer fake.setObjectMetaBuilderMutex.Unlock()
	fake.SetObjectMetaBuilderStub = nil
	fake.setObjectMetaBuilderReturns = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) SetObjectMetaBuilderReturnsOnCall(i int, result1 k8s.StatefulSetBuilder) {
	fake.setObjectMetaBuilderMutex.Lock()
	defer fake.setObjectMetaBuilderMutex.Unlock()
	fake.SetObjectMetaBuilderStub = nil
	if fake.setObjectMetaBuilderReturnsOnCall == nil {
		fake.setObjectMetaBuilderReturnsOnCall = make(map[int]struct {
			result1 k8s.StatefulSetBuilder
		})
	}
	fake.setObjectMetaBuilderReturnsOnCall[i] = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) SetReplicas(arg1 int32) k8s.StatefulSetBuilder {
	fake.setReplicasMutex.Lock()
	ret, specificReturn := fake.setReplicasReturnsOnCall[len(fake.setReplicasArgsForCall)]
	fake.setReplicasArgsForCall = append(fake.setReplicasArgsForCall, struct {
		arg1 int32
	}{arg1})
	stub := fake.SetReplicasStub
	fakeReturns := fake.setReplicasReturns
	fake.recordInvocation("SetReplicas", []interface{}{arg1})
	fake.setReplicasMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sStatefulSetBuilder) SetReplicasCallCount() int {
	fake.setReplicasMutex.RLock()
	defer fake.setReplicasMutex.RUnlock()
	return len(fake.setReplicasArgsForCall)
}

func (fake *K8sStatefulSetBuilder) SetReplicasCalls(stub func(int32) k8s.StatefulSetBuilder) {
	fake.setReplicasMutex.Lock()
	defer fake.setReplicasMutex.Unlock()
	fake.SetReplicasStub = stub
}

func (fake *K8sStatefulSetBuilder) SetReplicasArgsForCall(i int) int32 {
	fake.setReplicasMutex.RLock()
	defer fake.setReplicasMutex.RUnlock()
	argsForCall := fake.setReplicasArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sStatefulSetBuilder) SetReplicasReturns(result1 k8s.StatefulSetBuilder) {
	fake.setReplicasMutex.Lock()
	defer fake.setReplicasMutex.Unlock()
	fake.SetReplicasStub = nil
	fake.setReplicasReturns = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) SetReplicasReturnsOnCall(i int, result1 k8s.StatefulSetBuilder) {
	fake.setReplicasMutex.Lock()
	defer fake.setReplicasMutex.Unlock()
	fake.SetReplicasStub = nil
	if fake.setReplicasReturnsOnCall == nil {
		fake.setReplicasReturnsOnCall = make(map[int]struct {
			result1 k8s.StatefulSetBuilder
		})
	}
	fake.setReplicasReturnsOnCall[i] = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) SetStorageClass(arg1 string) k8s.StatefulSetBuilder {
	fake.setStorageClassMutex.Lock()
	ret, specificReturn := fake.setStorageClassReturnsOnCall[len(fake.setStorageClassArgsForCall)]
	fake.setStorageClassArgsForCall = append(fake.setStorageClassArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetStorageClassStub
	fakeReturns := fake.setStorageClassReturns
	fake.recordInvocation("SetStorageClass", []interface{}{arg1})
	fake.setStorageClassMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sStatefulSetBuilder) SetStorageClassCallCount() int {
	fake.setStorageClassMutex.RLock()
	defer fake.setStorageClassMutex.RUnlock()
	return len(fake.setStorageClassArgsForCall)
}

func (fake *K8sStatefulSetBuilder) SetStorageClassCalls(stub func(string) k8s.StatefulSetBuilder) {
	fake.setStorageClassMutex.Lock()
	defer fake.setStorageClassMutex.Unlock()
	fake.SetStorageClassStub = stub
}

func (fake *K8sStatefulSetBuilder) SetStorageClassArgsForCall(i int) string {
	fake.setStorageClassMutex.RLock()
	defer fake.setStorageClassMutex.RUnlock()
	argsForCall := fake.setStorageClassArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sStatefulSetBuilder) SetStorageClassReturns(result1 k8s.StatefulSetBuilder) {
	fake.setStorageClassMutex.Lock()
	defer fake.setStorageClassMutex.Unlock()
	fake.SetStorageClassStub = nil
	fake.setStorageClassReturns = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) SetStorageClassReturnsOnCall(i int, result1 k8s.StatefulSetBuilder) {
	fake.setStorageClassMutex.Lock()
	defer fake.setStorageClassMutex.Unlock()
	fake.SetStorageClassStub = nil
	if fake.setStorageClassReturnsOnCall == nil {
		fake.setStorageClassReturnsOnCall = make(map[int]struct {
			result1 k8s.StatefulSetBuilder
		})
	}
	fake.setStorageClassReturnsOnCall[i] = struct {
		result1 k8s.StatefulSetBuilder
	}{result1}
}

func (fake *K8sStatefulSetBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addImagePullSecretsMutex.RLock()
	defer fake.addImagePullSecretsMutex.RUnlock()
	fake.addLabelMutex.RLock()
	defer fake.addLabelMutex.RUnlock()
	fake.addVolumesMutex.RLock()
	defer fake.addVolumesMutex.RUnlock()
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	fake.setAffinityMutex.RLock()
	defer fake.setAffinityMutex.RUnlock()
	fake.setContainersBuilderMutex.RLock()
	defer fake.setContainersBuilderMutex.RUnlock()
	fake.setDatadirSizeMutex.RLock()
	defer fake.setDatadirSizeMutex.RUnlock()
	fake.setImagePullSecretsMutex.RLock()
	defer fake.setImagePullSecretsMutex.RUnlock()
	fake.setNameMutex.RLock()
	defer fake.setNameMutex.RUnlock()
	fake.setObjectMetaBuilderMutex.RLock()
	defer fake.setObjectMetaBuilderMutex.RUnlock()
	fake.setReplicasMutex.RLock()
	defer fake.setReplicasMutex.RUnlock()
	fake.setStorageClassMutex.RLock()
	defer fake.setStorageClassMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *K8sStatefulSetBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.StatefulSetBuilder = new(K8sStatefulSetBuilder)
