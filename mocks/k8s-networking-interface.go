// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/bborbe/k8s"
	v1 "k8s.io/client-go/kubernetes/typed/networking/v1"
	"k8s.io/client-go/rest"
)

type K8sNetworkingV1Interface struct {
	IngressClassesStub        func() v1.IngressClassInterface
	ingressClassesMutex       sync.RWMutex
	ingressClassesArgsForCall []struct {
	}
	ingressClassesReturns struct {
		result1 v1.IngressClassInterface
	}
	ingressClassesReturnsOnCall map[int]struct {
		result1 v1.IngressClassInterface
	}
	IngressesStub        func(string) v1.IngressInterface
	ingressesMutex       sync.RWMutex
	ingressesArgsForCall []struct {
		arg1 string
	}
	ingressesReturns struct {
		result1 v1.IngressInterface
	}
	ingressesReturnsOnCall map[int]struct {
		result1 v1.IngressInterface
	}
	NetworkPoliciesStub        func(string) v1.NetworkPolicyInterface
	networkPoliciesMutex       sync.RWMutex
	networkPoliciesArgsForCall []struct {
		arg1 string
	}
	networkPoliciesReturns struct {
		result1 v1.NetworkPolicyInterface
	}
	networkPoliciesReturnsOnCall map[int]struct {
		result1 v1.NetworkPolicyInterface
	}
	RESTClientStub        func() rest.Interface
	rESTClientMutex       sync.RWMutex
	rESTClientArgsForCall []struct {
	}
	rESTClientReturns struct {
		result1 rest.Interface
	}
	rESTClientReturnsOnCall map[int]struct {
		result1 rest.Interface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *K8sNetworkingV1Interface) IngressClasses() v1.IngressClassInterface {
	fake.ingressClassesMutex.Lock()
	ret, specificReturn := fake.ingressClassesReturnsOnCall[len(fake.ingressClassesArgsForCall)]
	fake.ingressClassesArgsForCall = append(fake.ingressClassesArgsForCall, struct {
	}{})
	stub := fake.IngressClassesStub
	fakeReturns := fake.ingressClassesReturns
	fake.recordInvocation("IngressClasses", []interface{}{})
	fake.ingressClassesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sNetworkingV1Interface) IngressClassesCallCount() int {
	fake.ingressClassesMutex.RLock()
	defer fake.ingressClassesMutex.RUnlock()
	return len(fake.ingressClassesArgsForCall)
}

func (fake *K8sNetworkingV1Interface) IngressClassesCalls(stub func() v1.IngressClassInterface) {
	fake.ingressClassesMutex.Lock()
	defer fake.ingressClassesMutex.Unlock()
	fake.IngressClassesStub = stub
}

func (fake *K8sNetworkingV1Interface) IngressClassesReturns(result1 v1.IngressClassInterface) {
	fake.ingressClassesMutex.Lock()
	defer fake.ingressClassesMutex.Unlock()
	fake.IngressClassesStub = nil
	fake.ingressClassesReturns = struct {
		result1 v1.IngressClassInterface
	}{result1}
}

func (fake *K8sNetworkingV1Interface) IngressClassesReturnsOnCall(i int, result1 v1.IngressClassInterface) {
	fake.ingressClassesMutex.Lock()
	defer fake.ingressClassesMutex.Unlock()
	fake.IngressClassesStub = nil
	if fake.ingressClassesReturnsOnCall == nil {
		fake.ingressClassesReturnsOnCall = make(map[int]struct {
			result1 v1.IngressClassInterface
		})
	}
	fake.ingressClassesReturnsOnCall[i] = struct {
		result1 v1.IngressClassInterface
	}{result1}
}

func (fake *K8sNetworkingV1Interface) Ingresses(arg1 string) v1.IngressInterface {
	fake.ingressesMutex.Lock()
	ret, specificReturn := fake.ingressesReturnsOnCall[len(fake.ingressesArgsForCall)]
	fake.ingressesArgsForCall = append(fake.ingressesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IngressesStub
	fakeReturns := fake.ingressesReturns
	fake.recordInvocation("Ingresses", []interface{}{arg1})
	fake.ingressesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sNetworkingV1Interface) IngressesCallCount() int {
	fake.ingressesMutex.RLock()
	defer fake.ingressesMutex.RUnlock()
	return len(fake.ingressesArgsForCall)
}

func (fake *K8sNetworkingV1Interface) IngressesCalls(stub func(string) v1.IngressInterface) {
	fake.ingressesMutex.Lock()
	defer fake.ingressesMutex.Unlock()
	fake.IngressesStub = stub
}

func (fake *K8sNetworkingV1Interface) IngressesArgsForCall(i int) string {
	fake.ingressesMutex.RLock()
	defer fake.ingressesMutex.RUnlock()
	argsForCall := fake.ingressesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sNetworkingV1Interface) IngressesReturns(result1 v1.IngressInterface) {
	fake.ingressesMutex.Lock()
	defer fake.ingressesMutex.Unlock()
	fake.IngressesStub = nil
	fake.ingressesReturns = struct {
		result1 v1.IngressInterface
	}{result1}
}

func (fake *K8sNetworkingV1Interface) IngressesReturnsOnCall(i int, result1 v1.IngressInterface) {
	fake.ingressesMutex.Lock()
	defer fake.ingressesMutex.Unlock()
	fake.IngressesStub = nil
	if fake.ingressesReturnsOnCall == nil {
		fake.ingressesReturnsOnCall = make(map[int]struct {
			result1 v1.IngressInterface
		})
	}
	fake.ingressesReturnsOnCall[i] = struct {
		result1 v1.IngressInterface
	}{result1}
}

func (fake *K8sNetworkingV1Interface) NetworkPolicies(arg1 string) v1.NetworkPolicyInterface {
	fake.networkPoliciesMutex.Lock()
	ret, specificReturn := fake.networkPoliciesReturnsOnCall[len(fake.networkPoliciesArgsForCall)]
	fake.networkPoliciesArgsForCall = append(fake.networkPoliciesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.NetworkPoliciesStub
	fakeReturns := fake.networkPoliciesReturns
	fake.recordInvocation("NetworkPolicies", []interface{}{arg1})
	fake.networkPoliciesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sNetworkingV1Interface) NetworkPoliciesCallCount() int {
	fake.networkPoliciesMutex.RLock()
	defer fake.networkPoliciesMutex.RUnlock()
	return len(fake.networkPoliciesArgsForCall)
}

func (fake *K8sNetworkingV1Interface) NetworkPoliciesCalls(stub func(string) v1.NetworkPolicyInterface) {
	fake.networkPoliciesMutex.Lock()
	defer fake.networkPoliciesMutex.Unlock()
	fake.NetworkPoliciesStub = stub
}

func (fake *K8sNetworkingV1Interface) NetworkPoliciesArgsForCall(i int) string {
	fake.networkPoliciesMutex.RLock()
	defer fake.networkPoliciesMutex.RUnlock()
	argsForCall := fake.networkPoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sNetworkingV1Interface) NetworkPoliciesReturns(result1 v1.NetworkPolicyInterface) {
	fake.networkPoliciesMutex.Lock()
	defer fake.networkPoliciesMutex.Unlock()
	fake.NetworkPoliciesStub = nil
	fake.networkPoliciesReturns = struct {
		result1 v1.NetworkPolicyInterface
	}{result1}
}

func (fake *K8sNetworkingV1Interface) NetworkPoliciesReturnsOnCall(i int, result1 v1.NetworkPolicyInterface) {
	fake.networkPoliciesMutex.Lock()
	defer fake.networkPoliciesMutex.Unlock()
	fake.NetworkPoliciesStub = nil
	if fake.networkPoliciesReturnsOnCall == nil {
		fake.networkPoliciesReturnsOnCall = make(map[int]struct {
			result1 v1.NetworkPolicyInterface
		})
	}
	fake.networkPoliciesReturnsOnCall[i] = struct {
		result1 v1.NetworkPolicyInterface
	}{result1}
}

func (fake *K8sNetworkingV1Interface) RESTClient() rest.Interface {
	fake.rESTClientMutex.Lock()
	ret, specificReturn := fake.rESTClientReturnsOnCall[len(fake.rESTClientArgsForCall)]
	fake.rESTClientArgsForCall = append(fake.rESTClientArgsForCall, struct {
	}{})
	stub := fake.RESTClientStub
	fakeReturns := fake.rESTClientReturns
	fake.recordInvocation("RESTClient", []interface{}{})
	fake.rESTClientMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sNetworkingV1Interface) RESTClientCallCount() int {
	fake.rESTClientMutex.RLock()
	defer fake.rESTClientMutex.RUnlock()
	return len(fake.rESTClientArgsForCall)
}

func (fake *K8sNetworkingV1Interface) RESTClientCalls(stub func() rest.Interface) {
	fake.rESTClientMutex.Lock()
	defer fake.rESTClientMutex.Unlock()
	fake.RESTClientStub = stub
}

func (fake *K8sNetworkingV1Interface) RESTClientReturns(result1 rest.Interface) {
	fake.rESTClientMutex.Lock()
	defer fake.rESTClientMutex.Unlock()
	fake.RESTClientStub = nil
	fake.rESTClientReturns = struct {
		result1 rest.Interface
	}{result1}
}

func (fake *K8sNetworkingV1Interface) RESTClientReturnsOnCall(i int, result1 rest.Interface) {
	fake.rESTClientMutex.Lock()
	defer fake.rESTClientMutex.Unlock()
	fake.RESTClientStub = nil
	if fake.rESTClientReturnsOnCall == nil {
		fake.rESTClientReturnsOnCall = make(map[int]struct {
			result1 rest.Interface
		})
	}
	fake.rESTClientReturnsOnCall[i] = struct {
		result1 rest.Interface
	}{result1}
}

func (fake *K8sNetworkingV1Interface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.ingressClassesMutex.RLock()
	defer fake.ingressClassesMutex.RUnlock()
	fake.ingressesMutex.RLock()
	defer fake.ingressesMutex.RUnlock()
	fake.networkPoliciesMutex.RLock()
	defer fake.networkPoliciesMutex.RUnlock()
	fake.rESTClientMutex.RLock()
	defer fake.rESTClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *K8sNetworkingV1Interface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.NetworkingV1Interface = new(K8sNetworkingV1Interface)
