// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/k8s"
	v1 "k8s.io/api/core/v1"
)

type K8sPodSpecBuilder struct {
	BuildStub        func(context.Context) (*v1.PodSpec, error)
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		arg1 context.Context
	}
	buildReturns struct {
		result1 *v1.PodSpec
		result2 error
	}
	buildReturnsOnCall map[int]struct {
		result1 *v1.PodSpec
		result2 error
	}
	SetAffinityStub        func(v1.Affinity) k8s.PodSpecBuilder
	setAffinityMutex       sync.RWMutex
	setAffinityArgsForCall []struct {
		arg1 v1.Affinity
	}
	setAffinityReturns struct {
		result1 k8s.PodSpecBuilder
	}
	setAffinityReturnsOnCall map[int]struct {
		result1 k8s.PodSpecBuilder
	}
	SetContainersStub        func([]v1.Container) k8s.PodSpecBuilder
	setContainersMutex       sync.RWMutex
	setContainersArgsForCall []struct {
		arg1 []v1.Container
	}
	setContainersReturns struct {
		result1 k8s.PodSpecBuilder
	}
	setContainersReturnsOnCall map[int]struct {
		result1 k8s.PodSpecBuilder
	}
	SetContainersBuilderStub        func(k8s.HasBuildContainers) k8s.PodSpecBuilder
	setContainersBuilderMutex       sync.RWMutex
	setContainersBuilderArgsForCall []struct {
		arg1 k8s.HasBuildContainers
	}
	setContainersBuilderReturns struct {
		result1 k8s.PodSpecBuilder
	}
	setContainersBuilderReturnsOnCall map[int]struct {
		result1 k8s.PodSpecBuilder
	}
	SetImagePullSecretsStub        func([]string) k8s.PodSpecBuilder
	setImagePullSecretsMutex       sync.RWMutex
	setImagePullSecretsArgsForCall []struct {
		arg1 []string
	}
	setImagePullSecretsReturns struct {
		result1 k8s.PodSpecBuilder
	}
	setImagePullSecretsReturnsOnCall map[int]struct {
		result1 k8s.PodSpecBuilder
	}
	SetPriorityClassNameStub        func(string) k8s.PodSpecBuilder
	setPriorityClassNameMutex       sync.RWMutex
	setPriorityClassNameArgsForCall []struct {
		arg1 string
	}
	setPriorityClassNameReturns struct {
		result1 k8s.PodSpecBuilder
	}
	setPriorityClassNameReturnsOnCall map[int]struct {
		result1 k8s.PodSpecBuilder
	}
	SetRestartPolicyStub        func(v1.RestartPolicy) k8s.PodSpecBuilder
	setRestartPolicyMutex       sync.RWMutex
	setRestartPolicyArgsForCall []struct {
		arg1 v1.RestartPolicy
	}
	setRestartPolicyReturns struct {
		result1 k8s.PodSpecBuilder
	}
	setRestartPolicyReturnsOnCall map[int]struct {
		result1 k8s.PodSpecBuilder
	}
	SetVolumesStub        func([]v1.Volume) k8s.PodSpecBuilder
	setVolumesMutex       sync.RWMutex
	setVolumesArgsForCall []struct {
		arg1 []v1.Volume
	}
	setVolumesReturns struct {
		result1 k8s.PodSpecBuilder
	}
	setVolumesReturnsOnCall map[int]struct {
		result1 k8s.PodSpecBuilder
	}
	ValidateStub        func(context.Context) error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		arg1 context.Context
	}
	validateReturns struct {
		result1 error
	}
	validateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *K8sPodSpecBuilder) Build(arg1 context.Context) (*v1.PodSpec, error) {
	fake.buildMutex.Lock()
	ret, specificReturn := fake.buildReturnsOnCall[len(fake.buildArgsForCall)]
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.BuildStub
	fakeReturns := fake.buildReturns
	fake.recordInvocation("Build", []interface{}{arg1})
	fake.buildMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *K8sPodSpecBuilder) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *K8sPodSpecBuilder) BuildCalls(stub func(context.Context) (*v1.PodSpec, error)) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = stub
}

func (fake *K8sPodSpecBuilder) BuildArgsForCall(i int) context.Context {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	argsForCall := fake.buildArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sPodSpecBuilder) BuildReturns(result1 *v1.PodSpec, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 *v1.PodSpec
		result2 error
	}{result1, result2}
}

func (fake *K8sPodSpecBuilder) BuildReturnsOnCall(i int, result1 *v1.PodSpec, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	if fake.buildReturnsOnCall == nil {
		fake.buildReturnsOnCall = make(map[int]struct {
			result1 *v1.PodSpec
			result2 error
		})
	}
	fake.buildReturnsOnCall[i] = struct {
		result1 *v1.PodSpec
		result2 error
	}{result1, result2}
}

func (fake *K8sPodSpecBuilder) SetAffinity(arg1 v1.Affinity) k8s.PodSpecBuilder {
	fake.setAffinityMutex.Lock()
	ret, specificReturn := fake.setAffinityReturnsOnCall[len(fake.setAffinityArgsForCall)]
	fake.setAffinityArgsForCall = append(fake.setAffinityArgsForCall, struct {
		arg1 v1.Affinity
	}{arg1})
	stub := fake.SetAffinityStub
	fakeReturns := fake.setAffinityReturns
	fake.recordInvocation("SetAffinity", []interface{}{arg1})
	fake.setAffinityMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sPodSpecBuilder) SetAffinityCallCount() int {
	fake.setAffinityMutex.RLock()
	defer fake.setAffinityMutex.RUnlock()
	return len(fake.setAffinityArgsForCall)
}

func (fake *K8sPodSpecBuilder) SetAffinityCalls(stub func(v1.Affinity) k8s.PodSpecBuilder) {
	fake.setAffinityMutex.Lock()
	defer fake.setAffinityMutex.Unlock()
	fake.SetAffinityStub = stub
}

func (fake *K8sPodSpecBuilder) SetAffinityArgsForCall(i int) v1.Affinity {
	fake.setAffinityMutex.RLock()
	defer fake.setAffinityMutex.RUnlock()
	argsForCall := fake.setAffinityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sPodSpecBuilder) SetAffinityReturns(result1 k8s.PodSpecBuilder) {
	fake.setAffinityMutex.Lock()
	defer fake.setAffinityMutex.Unlock()
	fake.SetAffinityStub = nil
	fake.setAffinityReturns = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetAffinityReturnsOnCall(i int, result1 k8s.PodSpecBuilder) {
	fake.setAffinityMutex.Lock()
	defer fake.setAffinityMutex.Unlock()
	fake.SetAffinityStub = nil
	if fake.setAffinityReturnsOnCall == nil {
		fake.setAffinityReturnsOnCall = make(map[int]struct {
			result1 k8s.PodSpecBuilder
		})
	}
	fake.setAffinityReturnsOnCall[i] = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetContainers(arg1 []v1.Container) k8s.PodSpecBuilder {
	var arg1Copy []v1.Container
	if arg1 != nil {
		arg1Copy = make([]v1.Container, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.setContainersMutex.Lock()
	ret, specificReturn := fake.setContainersReturnsOnCall[len(fake.setContainersArgsForCall)]
	fake.setContainersArgsForCall = append(fake.setContainersArgsForCall, struct {
		arg1 []v1.Container
	}{arg1Copy})
	stub := fake.SetContainersStub
	fakeReturns := fake.setContainersReturns
	fake.recordInvocation("SetContainers", []interface{}{arg1Copy})
	fake.setContainersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sPodSpecBuilder) SetContainersCallCount() int {
	fake.setContainersMutex.RLock()
	defer fake.setContainersMutex.RUnlock()
	return len(fake.setContainersArgsForCall)
}

func (fake *K8sPodSpecBuilder) SetContainersCalls(stub func([]v1.Container) k8s.PodSpecBuilder) {
	fake.setContainersMutex.Lock()
	defer fake.setContainersMutex.Unlock()
	fake.SetContainersStub = stub
}

func (fake *K8sPodSpecBuilder) SetContainersArgsForCall(i int) []v1.Container {
	fake.setContainersMutex.RLock()
	defer fake.setContainersMutex.RUnlock()
	argsForCall := fake.setContainersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sPodSpecBuilder) SetContainersReturns(result1 k8s.PodSpecBuilder) {
	fake.setContainersMutex.Lock()
	defer fake.setContainersMutex.Unlock()
	fake.SetContainersStub = nil
	fake.setContainersReturns = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetContainersReturnsOnCall(i int, result1 k8s.PodSpecBuilder) {
	fake.setContainersMutex.Lock()
	defer fake.setContainersMutex.Unlock()
	fake.SetContainersStub = nil
	if fake.setContainersReturnsOnCall == nil {
		fake.setContainersReturnsOnCall = make(map[int]struct {
			result1 k8s.PodSpecBuilder
		})
	}
	fake.setContainersReturnsOnCall[i] = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetContainersBuilder(arg1 k8s.HasBuildContainers) k8s.PodSpecBuilder {
	fake.setContainersBuilderMutex.Lock()
	ret, specificReturn := fake.setContainersBuilderReturnsOnCall[len(fake.setContainersBuilderArgsForCall)]
	fake.setContainersBuilderArgsForCall = append(fake.setContainersBuilderArgsForCall, struct {
		arg1 k8s.HasBuildContainers
	}{arg1})
	stub := fake.SetContainersBuilderStub
	fakeReturns := fake.setContainersBuilderReturns
	fake.recordInvocation("SetContainersBuilder", []interface{}{arg1})
	fake.setContainersBuilderMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sPodSpecBuilder) SetContainersBuilderCallCount() int {
	fake.setContainersBuilderMutex.RLock()
	defer fake.setContainersBuilderMutex.RUnlock()
	return len(fake.setContainersBuilderArgsForCall)
}

func (fake *K8sPodSpecBuilder) SetContainersBuilderCalls(stub func(k8s.HasBuildContainers) k8s.PodSpecBuilder) {
	fake.setContainersBuilderMutex.Lock()
	defer fake.setContainersBuilderMutex.Unlock()
	fake.SetContainersBuilderStub = stub
}

func (fake *K8sPodSpecBuilder) SetContainersBuilderArgsForCall(i int) k8s.HasBuildContainers {
	fake.setContainersBuilderMutex.RLock()
	defer fake.setContainersBuilderMutex.RUnlock()
	argsForCall := fake.setContainersBuilderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sPodSpecBuilder) SetContainersBuilderReturns(result1 k8s.PodSpecBuilder) {
	fake.setContainersBuilderMutex.Lock()
	defer fake.setContainersBuilderMutex.Unlock()
	fake.SetContainersBuilderStub = nil
	fake.setContainersBuilderReturns = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetContainersBuilderReturnsOnCall(i int, result1 k8s.PodSpecBuilder) {
	fake.setContainersBuilderMutex.Lock()
	defer fake.setContainersBuilderMutex.Unlock()
	fake.SetContainersBuilderStub = nil
	if fake.setContainersBuilderReturnsOnCall == nil {
		fake.setContainersBuilderReturnsOnCall = make(map[int]struct {
			result1 k8s.PodSpecBuilder
		})
	}
	fake.setContainersBuilderReturnsOnCall[i] = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetImagePullSecrets(arg1 []string) k8s.PodSpecBuilder {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.setImagePullSecretsMutex.Lock()
	ret, specificReturn := fake.setImagePullSecretsReturnsOnCall[len(fake.setImagePullSecretsArgsForCall)]
	fake.setImagePullSecretsArgsForCall = append(fake.setImagePullSecretsArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.SetImagePullSecretsStub
	fakeReturns := fake.setImagePullSecretsReturns
	fake.recordInvocation("SetImagePullSecrets", []interface{}{arg1Copy})
	fake.setImagePullSecretsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sPodSpecBuilder) SetImagePullSecretsCallCount() int {
	fake.setImagePullSecretsMutex.RLock()
	defer fake.setImagePullSecretsMutex.RUnlock()
	return len(fake.setImagePullSecretsArgsForCall)
}

func (fake *K8sPodSpecBuilder) SetImagePullSecretsCalls(stub func([]string) k8s.PodSpecBuilder) {
	fake.setImagePullSecretsMutex.Lock()
	defer fake.setImagePullSecretsMutex.Unlock()
	fake.SetImagePullSecretsStub = stub
}

func (fake *K8sPodSpecBuilder) SetImagePullSecretsArgsForCall(i int) []string {
	fake.setImagePullSecretsMutex.RLock()
	defer fake.setImagePullSecretsMutex.RUnlock()
	argsForCall := fake.setImagePullSecretsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sPodSpecBuilder) SetImagePullSecretsReturns(result1 k8s.PodSpecBuilder) {
	fake.setImagePullSecretsMutex.Lock()
	defer fake.setImagePullSecretsMutex.Unlock()
	fake.SetImagePullSecretsStub = nil
	fake.setImagePullSecretsReturns = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetImagePullSecretsReturnsOnCall(i int, result1 k8s.PodSpecBuilder) {
	fake.setImagePullSecretsMutex.Lock()
	defer fake.setImagePullSecretsMutex.Unlock()
	fake.SetImagePullSecretsStub = nil
	if fake.setImagePullSecretsReturnsOnCall == nil {
		fake.setImagePullSecretsReturnsOnCall = make(map[int]struct {
			result1 k8s.PodSpecBuilder
		})
	}
	fake.setImagePullSecretsReturnsOnCall[i] = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetPriorityClassName(arg1 string) k8s.PodSpecBuilder {
	fake.setPriorityClassNameMutex.Lock()
	ret, specificReturn := fake.setPriorityClassNameReturnsOnCall[len(fake.setPriorityClassNameArgsForCall)]
	fake.setPriorityClassNameArgsForCall = append(fake.setPriorityClassNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetPriorityClassNameStub
	fakeReturns := fake.setPriorityClassNameReturns
	fake.recordInvocation("SetPriorityClassName", []interface{}{arg1})
	fake.setPriorityClassNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sPodSpecBuilder) SetPriorityClassNameCallCount() int {
	fake.setPriorityClassNameMutex.RLock()
	defer fake.setPriorityClassNameMutex.RUnlock()
	return len(fake.setPriorityClassNameArgsForCall)
}

func (fake *K8sPodSpecBuilder) SetPriorityClassNameCalls(stub func(string) k8s.PodSpecBuilder) {
	fake.setPriorityClassNameMutex.Lock()
	defer fake.setPriorityClassNameMutex.Unlock()
	fake.SetPriorityClassNameStub = stub
}

func (fake *K8sPodSpecBuilder) SetPriorityClassNameArgsForCall(i int) string {
	fake.setPriorityClassNameMutex.RLock()
	defer fake.setPriorityClassNameMutex.RUnlock()
	argsForCall := fake.setPriorityClassNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sPodSpecBuilder) SetPriorityClassNameReturns(result1 k8s.PodSpecBuilder) {
	fake.setPriorityClassNameMutex.Lock()
	defer fake.setPriorityClassNameMutex.Unlock()
	fake.SetPriorityClassNameStub = nil
	fake.setPriorityClassNameReturns = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetPriorityClassNameReturnsOnCall(i int, result1 k8s.PodSpecBuilder) {
	fake.setPriorityClassNameMutex.Lock()
	defer fake.setPriorityClassNameMutex.Unlock()
	fake.SetPriorityClassNameStub = nil
	if fake.setPriorityClassNameReturnsOnCall == nil {
		fake.setPriorityClassNameReturnsOnCall = make(map[int]struct {
			result1 k8s.PodSpecBuilder
		})
	}
	fake.setPriorityClassNameReturnsOnCall[i] = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetRestartPolicy(arg1 v1.RestartPolicy) k8s.PodSpecBuilder {
	fake.setRestartPolicyMutex.Lock()
	ret, specificReturn := fake.setRestartPolicyReturnsOnCall[len(fake.setRestartPolicyArgsForCall)]
	fake.setRestartPolicyArgsForCall = append(fake.setRestartPolicyArgsForCall, struct {
		arg1 v1.RestartPolicy
	}{arg1})
	stub := fake.SetRestartPolicyStub
	fakeReturns := fake.setRestartPolicyReturns
	fake.recordInvocation("SetRestartPolicy", []interface{}{arg1})
	fake.setRestartPolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sPodSpecBuilder) SetRestartPolicyCallCount() int {
	fake.setRestartPolicyMutex.RLock()
	defer fake.setRestartPolicyMutex.RUnlock()
	return len(fake.setRestartPolicyArgsForCall)
}

func (fake *K8sPodSpecBuilder) SetRestartPolicyCalls(stub func(v1.RestartPolicy) k8s.PodSpecBuilder) {
	fake.setRestartPolicyMutex.Lock()
	defer fake.setRestartPolicyMutex.Unlock()
	fake.SetRestartPolicyStub = stub
}

func (fake *K8sPodSpecBuilder) SetRestartPolicyArgsForCall(i int) v1.RestartPolicy {
	fake.setRestartPolicyMutex.RLock()
	defer fake.setRestartPolicyMutex.RUnlock()
	argsForCall := fake.setRestartPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sPodSpecBuilder) SetRestartPolicyReturns(result1 k8s.PodSpecBuilder) {
	fake.setRestartPolicyMutex.Lock()
	defer fake.setRestartPolicyMutex.Unlock()
	fake.SetRestartPolicyStub = nil
	fake.setRestartPolicyReturns = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetRestartPolicyReturnsOnCall(i int, result1 k8s.PodSpecBuilder) {
	fake.setRestartPolicyMutex.Lock()
	defer fake.setRestartPolicyMutex.Unlock()
	fake.SetRestartPolicyStub = nil
	if fake.setRestartPolicyReturnsOnCall == nil {
		fake.setRestartPolicyReturnsOnCall = make(map[int]struct {
			result1 k8s.PodSpecBuilder
		})
	}
	fake.setRestartPolicyReturnsOnCall[i] = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetVolumes(arg1 []v1.Volume) k8s.PodSpecBuilder {
	var arg1Copy []v1.Volume
	if arg1 != nil {
		arg1Copy = make([]v1.Volume, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.setVolumesMutex.Lock()
	ret, specificReturn := fake.setVolumesReturnsOnCall[len(fake.setVolumesArgsForCall)]
	fake.setVolumesArgsForCall = append(fake.setVolumesArgsForCall, struct {
		arg1 []v1.Volume
	}{arg1Copy})
	stub := fake.SetVolumesStub
	fakeReturns := fake.setVolumesReturns
	fake.recordInvocation("SetVolumes", []interface{}{arg1Copy})
	fake.setVolumesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sPodSpecBuilder) SetVolumesCallCount() int {
	fake.setVolumesMutex.RLock()
	defer fake.setVolumesMutex.RUnlock()
	return len(fake.setVolumesArgsForCall)
}

func (fake *K8sPodSpecBuilder) SetVolumesCalls(stub func([]v1.Volume) k8s.PodSpecBuilder) {
	fake.setVolumesMutex.Lock()
	defer fake.setVolumesMutex.Unlock()
	fake.SetVolumesStub = stub
}

func (fake *K8sPodSpecBuilder) SetVolumesArgsForCall(i int) []v1.Volume {
	fake.setVolumesMutex.RLock()
	defer fake.setVolumesMutex.RUnlock()
	argsForCall := fake.setVolumesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sPodSpecBuilder) SetVolumesReturns(result1 k8s.PodSpecBuilder) {
	fake.setVolumesMutex.Lock()
	defer fake.setVolumesMutex.Unlock()
	fake.SetVolumesStub = nil
	fake.setVolumesReturns = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetVolumesReturnsOnCall(i int, result1 k8s.PodSpecBuilder) {
	fake.setVolumesMutex.Lock()
	defer fake.setVolumesMutex.Unlock()
	fake.SetVolumesStub = nil
	if fake.setVolumesReturnsOnCall == nil {
		fake.setVolumesReturnsOnCall = make(map[int]struct {
			result1 k8s.PodSpecBuilder
		})
	}
	fake.setVolumesReturnsOnCall[i] = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) Validate(arg1 context.Context) error {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ValidateStub
	fakeReturns := fake.validateReturns
	fake.recordInvocation("Validate", []interface{}{arg1})
	fake.validateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sPodSpecBuilder) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *K8sPodSpecBuilder) ValidateCalls(stub func(context.Context) error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = stub
}

func (fake *K8sPodSpecBuilder) ValidateArgsForCall(i int) context.Context {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	argsForCall := fake.validateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sPodSpecBuilder) ValidateReturns(result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 error
	}{result1}
}

func (fake *K8sPodSpecBuilder) ValidateReturnsOnCall(i int, result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *K8sPodSpecBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *K8sPodSpecBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.PodSpecBuilder = new(K8sPodSpecBuilder)
