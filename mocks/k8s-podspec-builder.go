// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/k8s"
	v1 "k8s.io/api/core/v1"
)

type K8sPodSpecBuilder struct {
	BuildStub        func(context.Context) (*v1.PodSpec, error)
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		arg1 context.Context
	}
	buildReturns struct {
		result1 *v1.PodSpec
		result2 error
	}
	buildReturnsOnCall map[int]struct {
		result1 *v1.PodSpec
		result2 error
	}
	SetContainersStub        func([]v1.Container) k8s.PodSpecBuilder
	setContainersMutex       sync.RWMutex
	setContainersArgsForCall []struct {
		arg1 []v1.Container
	}
	setContainersReturns struct {
		result1 k8s.PodSpecBuilder
	}
	setContainersReturnsOnCall map[int]struct {
		result1 k8s.PodSpecBuilder
	}
	SetRestartPolicyStub        func(v1.RestartPolicy) k8s.PodSpecBuilder
	setRestartPolicyMutex       sync.RWMutex
	setRestartPolicyArgsForCall []struct {
		arg1 v1.RestartPolicy
	}
	setRestartPolicyReturns struct {
		result1 k8s.PodSpecBuilder
	}
	setRestartPolicyReturnsOnCall map[int]struct {
		result1 k8s.PodSpecBuilder
	}
	SetVolumesStub        func([]v1.Volume) k8s.PodSpecBuilder
	setVolumesMutex       sync.RWMutex
	setVolumesArgsForCall []struct {
		arg1 []v1.Volume
	}
	setVolumesReturns struct {
		result1 k8s.PodSpecBuilder
	}
	setVolumesReturnsOnCall map[int]struct {
		result1 k8s.PodSpecBuilder
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *K8sPodSpecBuilder) Build(arg1 context.Context) (*v1.PodSpec, error) {
	fake.buildMutex.Lock()
	ret, specificReturn := fake.buildReturnsOnCall[len(fake.buildArgsForCall)]
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.BuildStub
	fakeReturns := fake.buildReturns
	fake.recordInvocation("Build", []interface{}{arg1})
	fake.buildMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *K8sPodSpecBuilder) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *K8sPodSpecBuilder) BuildCalls(stub func(context.Context) (*v1.PodSpec, error)) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = stub
}

func (fake *K8sPodSpecBuilder) BuildArgsForCall(i int) context.Context {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	argsForCall := fake.buildArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sPodSpecBuilder) BuildReturns(result1 *v1.PodSpec, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 *v1.PodSpec
		result2 error
	}{result1, result2}
}

func (fake *K8sPodSpecBuilder) BuildReturnsOnCall(i int, result1 *v1.PodSpec, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	if fake.buildReturnsOnCall == nil {
		fake.buildReturnsOnCall = make(map[int]struct {
			result1 *v1.PodSpec
			result2 error
		})
	}
	fake.buildReturnsOnCall[i] = struct {
		result1 *v1.PodSpec
		result2 error
	}{result1, result2}
}

func (fake *K8sPodSpecBuilder) SetContainers(arg1 []v1.Container) k8s.PodSpecBuilder {
	var arg1Copy []v1.Container
	if arg1 != nil {
		arg1Copy = make([]v1.Container, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.setContainersMutex.Lock()
	ret, specificReturn := fake.setContainersReturnsOnCall[len(fake.setContainersArgsForCall)]
	fake.setContainersArgsForCall = append(fake.setContainersArgsForCall, struct {
		arg1 []v1.Container
	}{arg1Copy})
	stub := fake.SetContainersStub
	fakeReturns := fake.setContainersReturns
	fake.recordInvocation("SetContainers", []interface{}{arg1Copy})
	fake.setContainersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sPodSpecBuilder) SetContainersCallCount() int {
	fake.setContainersMutex.RLock()
	defer fake.setContainersMutex.RUnlock()
	return len(fake.setContainersArgsForCall)
}

func (fake *K8sPodSpecBuilder) SetContainersCalls(stub func([]v1.Container) k8s.PodSpecBuilder) {
	fake.setContainersMutex.Lock()
	defer fake.setContainersMutex.Unlock()
	fake.SetContainersStub = stub
}

func (fake *K8sPodSpecBuilder) SetContainersArgsForCall(i int) []v1.Container {
	fake.setContainersMutex.RLock()
	defer fake.setContainersMutex.RUnlock()
	argsForCall := fake.setContainersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sPodSpecBuilder) SetContainersReturns(result1 k8s.PodSpecBuilder) {
	fake.setContainersMutex.Lock()
	defer fake.setContainersMutex.Unlock()
	fake.SetContainersStub = nil
	fake.setContainersReturns = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetContainersReturnsOnCall(i int, result1 k8s.PodSpecBuilder) {
	fake.setContainersMutex.Lock()
	defer fake.setContainersMutex.Unlock()
	fake.SetContainersStub = nil
	if fake.setContainersReturnsOnCall == nil {
		fake.setContainersReturnsOnCall = make(map[int]struct {
			result1 k8s.PodSpecBuilder
		})
	}
	fake.setContainersReturnsOnCall[i] = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetRestartPolicy(arg1 v1.RestartPolicy) k8s.PodSpecBuilder {
	fake.setRestartPolicyMutex.Lock()
	ret, specificReturn := fake.setRestartPolicyReturnsOnCall[len(fake.setRestartPolicyArgsForCall)]
	fake.setRestartPolicyArgsForCall = append(fake.setRestartPolicyArgsForCall, struct {
		arg1 v1.RestartPolicy
	}{arg1})
	stub := fake.SetRestartPolicyStub
	fakeReturns := fake.setRestartPolicyReturns
	fake.recordInvocation("SetRestartPolicy", []interface{}{arg1})
	fake.setRestartPolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sPodSpecBuilder) SetRestartPolicyCallCount() int {
	fake.setRestartPolicyMutex.RLock()
	defer fake.setRestartPolicyMutex.RUnlock()
	return len(fake.setRestartPolicyArgsForCall)
}

func (fake *K8sPodSpecBuilder) SetRestartPolicyCalls(stub func(v1.RestartPolicy) k8s.PodSpecBuilder) {
	fake.setRestartPolicyMutex.Lock()
	defer fake.setRestartPolicyMutex.Unlock()
	fake.SetRestartPolicyStub = stub
}

func (fake *K8sPodSpecBuilder) SetRestartPolicyArgsForCall(i int) v1.RestartPolicy {
	fake.setRestartPolicyMutex.RLock()
	defer fake.setRestartPolicyMutex.RUnlock()
	argsForCall := fake.setRestartPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sPodSpecBuilder) SetRestartPolicyReturns(result1 k8s.PodSpecBuilder) {
	fake.setRestartPolicyMutex.Lock()
	defer fake.setRestartPolicyMutex.Unlock()
	fake.SetRestartPolicyStub = nil
	fake.setRestartPolicyReturns = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetRestartPolicyReturnsOnCall(i int, result1 k8s.PodSpecBuilder) {
	fake.setRestartPolicyMutex.Lock()
	defer fake.setRestartPolicyMutex.Unlock()
	fake.SetRestartPolicyStub = nil
	if fake.setRestartPolicyReturnsOnCall == nil {
		fake.setRestartPolicyReturnsOnCall = make(map[int]struct {
			result1 k8s.PodSpecBuilder
		})
	}
	fake.setRestartPolicyReturnsOnCall[i] = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetVolumes(arg1 []v1.Volume) k8s.PodSpecBuilder {
	var arg1Copy []v1.Volume
	if arg1 != nil {
		arg1Copy = make([]v1.Volume, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.setVolumesMutex.Lock()
	ret, specificReturn := fake.setVolumesReturnsOnCall[len(fake.setVolumesArgsForCall)]
	fake.setVolumesArgsForCall = append(fake.setVolumesArgsForCall, struct {
		arg1 []v1.Volume
	}{arg1Copy})
	stub := fake.SetVolumesStub
	fakeReturns := fake.setVolumesReturns
	fake.recordInvocation("SetVolumes", []interface{}{arg1Copy})
	fake.setVolumesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sPodSpecBuilder) SetVolumesCallCount() int {
	fake.setVolumesMutex.RLock()
	defer fake.setVolumesMutex.RUnlock()
	return len(fake.setVolumesArgsForCall)
}

func (fake *K8sPodSpecBuilder) SetVolumesCalls(stub func([]v1.Volume) k8s.PodSpecBuilder) {
	fake.setVolumesMutex.Lock()
	defer fake.setVolumesMutex.Unlock()
	fake.SetVolumesStub = stub
}

func (fake *K8sPodSpecBuilder) SetVolumesArgsForCall(i int) []v1.Volume {
	fake.setVolumesMutex.RLock()
	defer fake.setVolumesMutex.RUnlock()
	argsForCall := fake.setVolumesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sPodSpecBuilder) SetVolumesReturns(result1 k8s.PodSpecBuilder) {
	fake.setVolumesMutex.Lock()
	defer fake.setVolumesMutex.Unlock()
	fake.SetVolumesStub = nil
	fake.setVolumesReturns = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) SetVolumesReturnsOnCall(i int, result1 k8s.PodSpecBuilder) {
	fake.setVolumesMutex.Lock()
	defer fake.setVolumesMutex.Unlock()
	fake.SetVolumesStub = nil
	if fake.setVolumesReturnsOnCall == nil {
		fake.setVolumesReturnsOnCall = make(map[int]struct {
			result1 k8s.PodSpecBuilder
		})
	}
	fake.setVolumesReturnsOnCall[i] = struct {
		result1 k8s.PodSpecBuilder
	}{result1}
}

func (fake *K8sPodSpecBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	fake.setContainersMutex.RLock()
	defer fake.setContainersMutex.RUnlock()
	fake.setRestartPolicyMutex.RLock()
	defer fake.setRestartPolicyMutex.RUnlock()
	fake.setVolumesMutex.RLock()
	defer fake.setVolumesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *K8sPodSpecBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.PodSpecBuilder = new(K8sPodSpecBuilder)
