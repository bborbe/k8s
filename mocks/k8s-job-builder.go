// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/k8s"
	v1 "k8s.io/api/batch/v1"
	v1b "k8s.io/api/core/v1"
	v1a "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type K8sJobBuilder struct {
	AddLabelStub        func(string, string) k8s.JobBuilder
	addLabelMutex       sync.RWMutex
	addLabelArgsForCall []struct {
		arg1 string
		arg2 string
	}
	addLabelReturns struct {
		result1 k8s.JobBuilder
	}
	addLabelReturnsOnCall map[int]struct {
		result1 k8s.JobBuilder
	}
	BuildStub        func(context.Context) (*v1.Job, error)
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		arg1 context.Context
	}
	buildReturns struct {
		result1 *v1.Job
		result2 error
	}
	buildReturnsOnCall map[int]struct {
		result1 *v1.Job
		result2 error
	}
	SetComponentStub        func(string) k8s.JobBuilder
	setComponentMutex       sync.RWMutex
	setComponentArgsForCall []struct {
		arg1 string
	}
	setComponentReturns struct {
		result1 k8s.JobBuilder
	}
	setComponentReturnsOnCall map[int]struct {
		result1 k8s.JobBuilder
	}
	SetLabelsStub        func(map[string]string) k8s.JobBuilder
	setLabelsMutex       sync.RWMutex
	setLabelsArgsForCall []struct {
		arg1 map[string]string
	}
	setLabelsReturns struct {
		result1 k8s.JobBuilder
	}
	setLabelsReturnsOnCall map[int]struct {
		result1 k8s.JobBuilder
	}
	SetNameStub        func(k8s.Name) k8s.JobBuilder
	setNameMutex       sync.RWMutex
	setNameArgsForCall []struct {
		arg1 k8s.Name
	}
	setNameReturns struct {
		result1 k8s.JobBuilder
	}
	setNameReturnsOnCall map[int]struct {
		result1 k8s.JobBuilder
	}
	SetObjectMetaStub        func(v1a.ObjectMeta) k8s.JobBuilder
	setObjectMetaMutex       sync.RWMutex
	setObjectMetaArgsForCall []struct {
		arg1 v1a.ObjectMeta
	}
	setObjectMetaReturns struct {
		result1 k8s.JobBuilder
	}
	setObjectMetaReturnsOnCall map[int]struct {
		result1 k8s.JobBuilder
	}
	SetPodSpecStub        func(v1b.PodSpec) k8s.JobBuilder
	setPodSpecMutex       sync.RWMutex
	setPodSpecArgsForCall []struct {
		arg1 v1b.PodSpec
	}
	setPodSpecReturns struct {
		result1 k8s.JobBuilder
	}
	setPodSpecReturnsOnCall map[int]struct {
		result1 k8s.JobBuilder
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *K8sJobBuilder) AddLabel(arg1 string, arg2 string) k8s.JobBuilder {
	fake.addLabelMutex.Lock()
	ret, specificReturn := fake.addLabelReturnsOnCall[len(fake.addLabelArgsForCall)]
	fake.addLabelArgsForCall = append(fake.addLabelArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.AddLabelStub
	fakeReturns := fake.addLabelReturns
	fake.recordInvocation("AddLabel", []interface{}{arg1, arg2})
	fake.addLabelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sJobBuilder) AddLabelCallCount() int {
	fake.addLabelMutex.RLock()
	defer fake.addLabelMutex.RUnlock()
	return len(fake.addLabelArgsForCall)
}

func (fake *K8sJobBuilder) AddLabelCalls(stub func(string, string) k8s.JobBuilder) {
	fake.addLabelMutex.Lock()
	defer fake.addLabelMutex.Unlock()
	fake.AddLabelStub = stub
}

func (fake *K8sJobBuilder) AddLabelArgsForCall(i int) (string, string) {
	fake.addLabelMutex.RLock()
	defer fake.addLabelMutex.RUnlock()
	argsForCall := fake.addLabelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *K8sJobBuilder) AddLabelReturns(result1 k8s.JobBuilder) {
	fake.addLabelMutex.Lock()
	defer fake.addLabelMutex.Unlock()
	fake.AddLabelStub = nil
	fake.addLabelReturns = struct {
		result1 k8s.JobBuilder
	}{result1}
}

func (fake *K8sJobBuilder) AddLabelReturnsOnCall(i int, result1 k8s.JobBuilder) {
	fake.addLabelMutex.Lock()
	defer fake.addLabelMutex.Unlock()
	fake.AddLabelStub = nil
	if fake.addLabelReturnsOnCall == nil {
		fake.addLabelReturnsOnCall = make(map[int]struct {
			result1 k8s.JobBuilder
		})
	}
	fake.addLabelReturnsOnCall[i] = struct {
		result1 k8s.JobBuilder
	}{result1}
}

func (fake *K8sJobBuilder) Build(arg1 context.Context) (*v1.Job, error) {
	fake.buildMutex.Lock()
	ret, specificReturn := fake.buildReturnsOnCall[len(fake.buildArgsForCall)]
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.BuildStub
	fakeReturns := fake.buildReturns
	fake.recordInvocation("Build", []interface{}{arg1})
	fake.buildMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *K8sJobBuilder) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *K8sJobBuilder) BuildCalls(stub func(context.Context) (*v1.Job, error)) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = stub
}

func (fake *K8sJobBuilder) BuildArgsForCall(i int) context.Context {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	argsForCall := fake.buildArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sJobBuilder) BuildReturns(result1 *v1.Job, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 *v1.Job
		result2 error
	}{result1, result2}
}

func (fake *K8sJobBuilder) BuildReturnsOnCall(i int, result1 *v1.Job, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	if fake.buildReturnsOnCall == nil {
		fake.buildReturnsOnCall = make(map[int]struct {
			result1 *v1.Job
			result2 error
		})
	}
	fake.buildReturnsOnCall[i] = struct {
		result1 *v1.Job
		result2 error
	}{result1, result2}
}

func (fake *K8sJobBuilder) SetComponent(arg1 string) k8s.JobBuilder {
	fake.setComponentMutex.Lock()
	ret, specificReturn := fake.setComponentReturnsOnCall[len(fake.setComponentArgsForCall)]
	fake.setComponentArgsForCall = append(fake.setComponentArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetComponentStub
	fakeReturns := fake.setComponentReturns
	fake.recordInvocation("SetComponent", []interface{}{arg1})
	fake.setComponentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sJobBuilder) SetComponentCallCount() int {
	fake.setComponentMutex.RLock()
	defer fake.setComponentMutex.RUnlock()
	return len(fake.setComponentArgsForCall)
}

func (fake *K8sJobBuilder) SetComponentCalls(stub func(string) k8s.JobBuilder) {
	fake.setComponentMutex.Lock()
	defer fake.setComponentMutex.Unlock()
	fake.SetComponentStub = stub
}

func (fake *K8sJobBuilder) SetComponentArgsForCall(i int) string {
	fake.setComponentMutex.RLock()
	defer fake.setComponentMutex.RUnlock()
	argsForCall := fake.setComponentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sJobBuilder) SetComponentReturns(result1 k8s.JobBuilder) {
	fake.setComponentMutex.Lock()
	defer fake.setComponentMutex.Unlock()
	fake.SetComponentStub = nil
	fake.setComponentReturns = struct {
		result1 k8s.JobBuilder
	}{result1}
}

func (fake *K8sJobBuilder) SetComponentReturnsOnCall(i int, result1 k8s.JobBuilder) {
	fake.setComponentMutex.Lock()
	defer fake.setComponentMutex.Unlock()
	fake.SetComponentStub = nil
	if fake.setComponentReturnsOnCall == nil {
		fake.setComponentReturnsOnCall = make(map[int]struct {
			result1 k8s.JobBuilder
		})
	}
	fake.setComponentReturnsOnCall[i] = struct {
		result1 k8s.JobBuilder
	}{result1}
}

func (fake *K8sJobBuilder) SetLabels(arg1 map[string]string) k8s.JobBuilder {
	fake.setLabelsMutex.Lock()
	ret, specificReturn := fake.setLabelsReturnsOnCall[len(fake.setLabelsArgsForCall)]
	fake.setLabelsArgsForCall = append(fake.setLabelsArgsForCall, struct {
		arg1 map[string]string
	}{arg1})
	stub := fake.SetLabelsStub
	fakeReturns := fake.setLabelsReturns
	fake.recordInvocation("SetLabels", []interface{}{arg1})
	fake.setLabelsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sJobBuilder) SetLabelsCallCount() int {
	fake.setLabelsMutex.RLock()
	defer fake.setLabelsMutex.RUnlock()
	return len(fake.setLabelsArgsForCall)
}

func (fake *K8sJobBuilder) SetLabelsCalls(stub func(map[string]string) k8s.JobBuilder) {
	fake.setLabelsMutex.Lock()
	defer fake.setLabelsMutex.Unlock()
	fake.SetLabelsStub = stub
}

func (fake *K8sJobBuilder) SetLabelsArgsForCall(i int) map[string]string {
	fake.setLabelsMutex.RLock()
	defer fake.setLabelsMutex.RUnlock()
	argsForCall := fake.setLabelsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sJobBuilder) SetLabelsReturns(result1 k8s.JobBuilder) {
	fake.setLabelsMutex.Lock()
	defer fake.setLabelsMutex.Unlock()
	fake.SetLabelsStub = nil
	fake.setLabelsReturns = struct {
		result1 k8s.JobBuilder
	}{result1}
}

func (fake *K8sJobBuilder) SetLabelsReturnsOnCall(i int, result1 k8s.JobBuilder) {
	fake.setLabelsMutex.Lock()
	defer fake.setLabelsMutex.Unlock()
	fake.SetLabelsStub = nil
	if fake.setLabelsReturnsOnCall == nil {
		fake.setLabelsReturnsOnCall = make(map[int]struct {
			result1 k8s.JobBuilder
		})
	}
	fake.setLabelsReturnsOnCall[i] = struct {
		result1 k8s.JobBuilder
	}{result1}
}

func (fake *K8sJobBuilder) SetName(arg1 k8s.Name) k8s.JobBuilder {
	fake.setNameMutex.Lock()
	ret, specificReturn := fake.setNameReturnsOnCall[len(fake.setNameArgsForCall)]
	fake.setNameArgsForCall = append(fake.setNameArgsForCall, struct {
		arg1 k8s.Name
	}{arg1})
	stub := fake.SetNameStub
	fakeReturns := fake.setNameReturns
	fake.recordInvocation("SetName", []interface{}{arg1})
	fake.setNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sJobBuilder) SetNameCallCount() int {
	fake.setNameMutex.RLock()
	defer fake.setNameMutex.RUnlock()
	return len(fake.setNameArgsForCall)
}

func (fake *K8sJobBuilder) SetNameCalls(stub func(k8s.Name) k8s.JobBuilder) {
	fake.setNameMutex.Lock()
	defer fake.setNameMutex.Unlock()
	fake.SetNameStub = stub
}

func (fake *K8sJobBuilder) SetNameArgsForCall(i int) k8s.Name {
	fake.setNameMutex.RLock()
	defer fake.setNameMutex.RUnlock()
	argsForCall := fake.setNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sJobBuilder) SetNameReturns(result1 k8s.JobBuilder) {
	fake.setNameMutex.Lock()
	defer fake.setNameMutex.Unlock()
	fake.SetNameStub = nil
	fake.setNameReturns = struct {
		result1 k8s.JobBuilder
	}{result1}
}

func (fake *K8sJobBuilder) SetNameReturnsOnCall(i int, result1 k8s.JobBuilder) {
	fake.setNameMutex.Lock()
	defer fake.setNameMutex.Unlock()
	fake.SetNameStub = nil
	if fake.setNameReturnsOnCall == nil {
		fake.setNameReturnsOnCall = make(map[int]struct {
			result1 k8s.JobBuilder
		})
	}
	fake.setNameReturnsOnCall[i] = struct {
		result1 k8s.JobBuilder
	}{result1}
}

func (fake *K8sJobBuilder) SetObjectMeta(arg1 v1a.ObjectMeta) k8s.JobBuilder {
	fake.setObjectMetaMutex.Lock()
	ret, specificReturn := fake.setObjectMetaReturnsOnCall[len(fake.setObjectMetaArgsForCall)]
	fake.setObjectMetaArgsForCall = append(fake.setObjectMetaArgsForCall, struct {
		arg1 v1a.ObjectMeta
	}{arg1})
	stub := fake.SetObjectMetaStub
	fakeReturns := fake.setObjectMetaReturns
	fake.recordInvocation("SetObjectMeta", []interface{}{arg1})
	fake.setObjectMetaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sJobBuilder) SetObjectMetaCallCount() int {
	fake.setObjectMetaMutex.RLock()
	defer fake.setObjectMetaMutex.RUnlock()
	return len(fake.setObjectMetaArgsForCall)
}

func (fake *K8sJobBuilder) SetObjectMetaCalls(stub func(v1a.ObjectMeta) k8s.JobBuilder) {
	fake.setObjectMetaMutex.Lock()
	defer fake.setObjectMetaMutex.Unlock()
	fake.SetObjectMetaStub = stub
}

func (fake *K8sJobBuilder) SetObjectMetaArgsForCall(i int) v1a.ObjectMeta {
	fake.setObjectMetaMutex.RLock()
	defer fake.setObjectMetaMutex.RUnlock()
	argsForCall := fake.setObjectMetaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sJobBuilder) SetObjectMetaReturns(result1 k8s.JobBuilder) {
	fake.setObjectMetaMutex.Lock()
	defer fake.setObjectMetaMutex.Unlock()
	fake.SetObjectMetaStub = nil
	fake.setObjectMetaReturns = struct {
		result1 k8s.JobBuilder
	}{result1}
}

func (fake *K8sJobBuilder) SetObjectMetaReturnsOnCall(i int, result1 k8s.JobBuilder) {
	fake.setObjectMetaMutex.Lock()
	defer fake.setObjectMetaMutex.Unlock()
	fake.SetObjectMetaStub = nil
	if fake.setObjectMetaReturnsOnCall == nil {
		fake.setObjectMetaReturnsOnCall = make(map[int]struct {
			result1 k8s.JobBuilder
		})
	}
	fake.setObjectMetaReturnsOnCall[i] = struct {
		result1 k8s.JobBuilder
	}{result1}
}

func (fake *K8sJobBuilder) SetPodSpec(arg1 v1b.PodSpec) k8s.JobBuilder {
	fake.setPodSpecMutex.Lock()
	ret, specificReturn := fake.setPodSpecReturnsOnCall[len(fake.setPodSpecArgsForCall)]
	fake.setPodSpecArgsForCall = append(fake.setPodSpecArgsForCall, struct {
		arg1 v1b.PodSpec
	}{arg1})
	stub := fake.SetPodSpecStub
	fakeReturns := fake.setPodSpecReturns
	fake.recordInvocation("SetPodSpec", []interface{}{arg1})
	fake.setPodSpecMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sJobBuilder) SetPodSpecCallCount() int {
	fake.setPodSpecMutex.RLock()
	defer fake.setPodSpecMutex.RUnlock()
	return len(fake.setPodSpecArgsForCall)
}

func (fake *K8sJobBuilder) SetPodSpecCalls(stub func(v1b.PodSpec) k8s.JobBuilder) {
	fake.setPodSpecMutex.Lock()
	defer fake.setPodSpecMutex.Unlock()
	fake.SetPodSpecStub = stub
}

func (fake *K8sJobBuilder) SetPodSpecArgsForCall(i int) v1b.PodSpec {
	fake.setPodSpecMutex.RLock()
	defer fake.setPodSpecMutex.RUnlock()
	argsForCall := fake.setPodSpecArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sJobBuilder) SetPodSpecReturns(result1 k8s.JobBuilder) {
	fake.setPodSpecMutex.Lock()
	defer fake.setPodSpecMutex.Unlock()
	fake.SetPodSpecStub = nil
	fake.setPodSpecReturns = struct {
		result1 k8s.JobBuilder
	}{result1}
}

func (fake *K8sJobBuilder) SetPodSpecReturnsOnCall(i int, result1 k8s.JobBuilder) {
	fake.setPodSpecMutex.Lock()
	defer fake.setPodSpecMutex.Unlock()
	fake.SetPodSpecStub = nil
	if fake.setPodSpecReturnsOnCall == nil {
		fake.setPodSpecReturnsOnCall = make(map[int]struct {
			result1 k8s.JobBuilder
		})
	}
	fake.setPodSpecReturnsOnCall[i] = struct {
		result1 k8s.JobBuilder
	}{result1}
}

func (fake *K8sJobBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addLabelMutex.RLock()
	defer fake.addLabelMutex.RUnlock()
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	fake.setComponentMutex.RLock()
	defer fake.setComponentMutex.RUnlock()
	fake.setLabelsMutex.RLock()
	defer fake.setLabelsMutex.RUnlock()
	fake.setNameMutex.RLock()
	defer fake.setNameMutex.RUnlock()
	fake.setObjectMetaMutex.RLock()
	defer fake.setObjectMetaMutex.RUnlock()
	fake.setPodSpecMutex.RLock()
	defer fake.setPodSpecMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *K8sJobBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.JobBuilder = new(K8sJobBuilder)
