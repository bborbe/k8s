// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/bborbe/k8s"
	v1 "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset/typed/apiextensions/v1"
	"k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset/typed/apiextensions/v1beta1"
	"k8s.io/client-go/discovery"
)

type K8sApiextensionsInterface struct {
	ApiextensionsV1Stub        func() v1.ApiextensionsV1Interface
	apiextensionsV1Mutex       sync.RWMutex
	apiextensionsV1ArgsForCall []struct {
	}
	apiextensionsV1Returns struct {
		result1 v1.ApiextensionsV1Interface
	}
	apiextensionsV1ReturnsOnCall map[int]struct {
		result1 v1.ApiextensionsV1Interface
	}
	ApiextensionsV1beta1Stub        func() v1beta1.ApiextensionsV1beta1Interface
	apiextensionsV1beta1Mutex       sync.RWMutex
	apiextensionsV1beta1ArgsForCall []struct {
	}
	apiextensionsV1beta1Returns struct {
		result1 v1beta1.ApiextensionsV1beta1Interface
	}
	apiextensionsV1beta1ReturnsOnCall map[int]struct {
		result1 v1beta1.ApiextensionsV1beta1Interface
	}
	DiscoveryStub        func() discovery.DiscoveryInterface
	discoveryMutex       sync.RWMutex
	discoveryArgsForCall []struct {
	}
	discoveryReturns struct {
		result1 discovery.DiscoveryInterface
	}
	discoveryReturnsOnCall map[int]struct {
		result1 discovery.DiscoveryInterface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *K8sApiextensionsInterface) ApiextensionsV1() v1.ApiextensionsV1Interface {
	fake.apiextensionsV1Mutex.Lock()
	ret, specificReturn := fake.apiextensionsV1ReturnsOnCall[len(fake.apiextensionsV1ArgsForCall)]
	fake.apiextensionsV1ArgsForCall = append(fake.apiextensionsV1ArgsForCall, struct {
	}{})
	stub := fake.ApiextensionsV1Stub
	fakeReturns := fake.apiextensionsV1Returns
	fake.recordInvocation("ApiextensionsV1", []interface{}{})
	fake.apiextensionsV1Mutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sApiextensionsInterface) ApiextensionsV1CallCount() int {
	fake.apiextensionsV1Mutex.RLock()
	defer fake.apiextensionsV1Mutex.RUnlock()
	return len(fake.apiextensionsV1ArgsForCall)
}

func (fake *K8sApiextensionsInterface) ApiextensionsV1Calls(stub func() v1.ApiextensionsV1Interface) {
	fake.apiextensionsV1Mutex.Lock()
	defer fake.apiextensionsV1Mutex.Unlock()
	fake.ApiextensionsV1Stub = stub
}

func (fake *K8sApiextensionsInterface) ApiextensionsV1Returns(result1 v1.ApiextensionsV1Interface) {
	fake.apiextensionsV1Mutex.Lock()
	defer fake.apiextensionsV1Mutex.Unlock()
	fake.ApiextensionsV1Stub = nil
	fake.apiextensionsV1Returns = struct {
		result1 v1.ApiextensionsV1Interface
	}{result1}
}

func (fake *K8sApiextensionsInterface) ApiextensionsV1ReturnsOnCall(i int, result1 v1.ApiextensionsV1Interface) {
	fake.apiextensionsV1Mutex.Lock()
	defer fake.apiextensionsV1Mutex.Unlock()
	fake.ApiextensionsV1Stub = nil
	if fake.apiextensionsV1ReturnsOnCall == nil {
		fake.apiextensionsV1ReturnsOnCall = make(map[int]struct {
			result1 v1.ApiextensionsV1Interface
		})
	}
	fake.apiextensionsV1ReturnsOnCall[i] = struct {
		result1 v1.ApiextensionsV1Interface
	}{result1}
}

func (fake *K8sApiextensionsInterface) ApiextensionsV1beta1() v1beta1.ApiextensionsV1beta1Interface {
	fake.apiextensionsV1beta1Mutex.Lock()
	ret, specificReturn := fake.apiextensionsV1beta1ReturnsOnCall[len(fake.apiextensionsV1beta1ArgsForCall)]
	fake.apiextensionsV1beta1ArgsForCall = append(fake.apiextensionsV1beta1ArgsForCall, struct {
	}{})
	stub := fake.ApiextensionsV1beta1Stub
	fakeReturns := fake.apiextensionsV1beta1Returns
	fake.recordInvocation("ApiextensionsV1beta1", []interface{}{})
	fake.apiextensionsV1beta1Mutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sApiextensionsInterface) ApiextensionsV1beta1CallCount() int {
	fake.apiextensionsV1beta1Mutex.RLock()
	defer fake.apiextensionsV1beta1Mutex.RUnlock()
	return len(fake.apiextensionsV1beta1ArgsForCall)
}

func (fake *K8sApiextensionsInterface) ApiextensionsV1beta1Calls(stub func() v1beta1.ApiextensionsV1beta1Interface) {
	fake.apiextensionsV1beta1Mutex.Lock()
	defer fake.apiextensionsV1beta1Mutex.Unlock()
	fake.ApiextensionsV1beta1Stub = stub
}

func (fake *K8sApiextensionsInterface) ApiextensionsV1beta1Returns(result1 v1beta1.ApiextensionsV1beta1Interface) {
	fake.apiextensionsV1beta1Mutex.Lock()
	defer fake.apiextensionsV1beta1Mutex.Unlock()
	fake.ApiextensionsV1beta1Stub = nil
	fake.apiextensionsV1beta1Returns = struct {
		result1 v1beta1.ApiextensionsV1beta1Interface
	}{result1}
}

func (fake *K8sApiextensionsInterface) ApiextensionsV1beta1ReturnsOnCall(i int, result1 v1beta1.ApiextensionsV1beta1Interface) {
	fake.apiextensionsV1beta1Mutex.Lock()
	defer fake.apiextensionsV1beta1Mutex.Unlock()
	fake.ApiextensionsV1beta1Stub = nil
	if fake.apiextensionsV1beta1ReturnsOnCall == nil {
		fake.apiextensionsV1beta1ReturnsOnCall = make(map[int]struct {
			result1 v1beta1.ApiextensionsV1beta1Interface
		})
	}
	fake.apiextensionsV1beta1ReturnsOnCall[i] = struct {
		result1 v1beta1.ApiextensionsV1beta1Interface
	}{result1}
}

func (fake *K8sApiextensionsInterface) Discovery() discovery.DiscoveryInterface {
	fake.discoveryMutex.Lock()
	ret, specificReturn := fake.discoveryReturnsOnCall[len(fake.discoveryArgsForCall)]
	fake.discoveryArgsForCall = append(fake.discoveryArgsForCall, struct {
	}{})
	stub := fake.DiscoveryStub
	fakeReturns := fake.discoveryReturns
	fake.recordInvocation("Discovery", []interface{}{})
	fake.discoveryMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sApiextensionsInterface) DiscoveryCallCount() int {
	fake.discoveryMutex.RLock()
	defer fake.discoveryMutex.RUnlock()
	return len(fake.discoveryArgsForCall)
}

func (fake *K8sApiextensionsInterface) DiscoveryCalls(stub func() discovery.DiscoveryInterface) {
	fake.discoveryMutex.Lock()
	defer fake.discoveryMutex.Unlock()
	fake.DiscoveryStub = stub
}

func (fake *K8sApiextensionsInterface) DiscoveryReturns(result1 discovery.DiscoveryInterface) {
	fake.discoveryMutex.Lock()
	defer fake.discoveryMutex.Unlock()
	fake.DiscoveryStub = nil
	fake.discoveryReturns = struct {
		result1 discovery.DiscoveryInterface
	}{result1}
}

func (fake *K8sApiextensionsInterface) DiscoveryReturnsOnCall(i int, result1 discovery.DiscoveryInterface) {
	fake.discoveryMutex.Lock()
	defer fake.discoveryMutex.Unlock()
	fake.DiscoveryStub = nil
	if fake.discoveryReturnsOnCall == nil {
		fake.discoveryReturnsOnCall = make(map[int]struct {
			result1 discovery.DiscoveryInterface
		})
	}
	fake.discoveryReturnsOnCall[i] = struct {
		result1 discovery.DiscoveryInterface
	}{result1}
}

func (fake *K8sApiextensionsInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *K8sApiextensionsInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.ApiextensionsInterface = new(K8sApiextensionsInterface)
