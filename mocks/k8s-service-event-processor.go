// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/k8s"
	v1 "k8s.io/api/core/v1"
)

type K8sServiceEventProcessor struct {
	OnDeleteStub        func(context.Context, v1.Service) error
	onDeleteMutex       sync.RWMutex
	onDeleteArgsForCall []struct {
		arg1 context.Context
		arg2 v1.Service
	}
	onDeleteReturns struct {
		result1 error
	}
	onDeleteReturnsOnCall map[int]struct {
		result1 error
	}
	OnUpdateStub        func(context.Context, v1.Service) error
	onUpdateMutex       sync.RWMutex
	onUpdateArgsForCall []struct {
		arg1 context.Context
		arg2 v1.Service
	}
	onUpdateReturns struct {
		result1 error
	}
	onUpdateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *K8sServiceEventProcessor) OnDelete(arg1 context.Context, arg2 v1.Service) error {
	fake.onDeleteMutex.Lock()
	ret, specificReturn := fake.onDeleteReturnsOnCall[len(fake.onDeleteArgsForCall)]
	fake.onDeleteArgsForCall = append(fake.onDeleteArgsForCall, struct {
		arg1 context.Context
		arg2 v1.Service
	}{arg1, arg2})
	stub := fake.OnDeleteStub
	fakeReturns := fake.onDeleteReturns
	fake.recordInvocation("OnDelete", []interface{}{arg1, arg2})
	fake.onDeleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sServiceEventProcessor) OnDeleteCallCount() int {
	fake.onDeleteMutex.RLock()
	defer fake.onDeleteMutex.RUnlock()
	return len(fake.onDeleteArgsForCall)
}

func (fake *K8sServiceEventProcessor) OnDeleteCalls(stub func(context.Context, v1.Service) error) {
	fake.onDeleteMutex.Lock()
	defer fake.onDeleteMutex.Unlock()
	fake.OnDeleteStub = stub
}

func (fake *K8sServiceEventProcessor) OnDeleteArgsForCall(i int) (context.Context, v1.Service) {
	fake.onDeleteMutex.RLock()
	defer fake.onDeleteMutex.RUnlock()
	argsForCall := fake.onDeleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *K8sServiceEventProcessor) OnDeleteReturns(result1 error) {
	fake.onDeleteMutex.Lock()
	defer fake.onDeleteMutex.Unlock()
	fake.OnDeleteStub = nil
	fake.onDeleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *K8sServiceEventProcessor) OnDeleteReturnsOnCall(i int, result1 error) {
	fake.onDeleteMutex.Lock()
	defer fake.onDeleteMutex.Unlock()
	fake.OnDeleteStub = nil
	if fake.onDeleteReturnsOnCall == nil {
		fake.onDeleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.onDeleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *K8sServiceEventProcessor) OnUpdate(arg1 context.Context, arg2 v1.Service) error {
	fake.onUpdateMutex.Lock()
	ret, specificReturn := fake.onUpdateReturnsOnCall[len(fake.onUpdateArgsForCall)]
	fake.onUpdateArgsForCall = append(fake.onUpdateArgsForCall, struct {
		arg1 context.Context
		arg2 v1.Service
	}{arg1, arg2})
	stub := fake.OnUpdateStub
	fakeReturns := fake.onUpdateReturns
	fake.recordInvocation("OnUpdate", []interface{}{arg1, arg2})
	fake.onUpdateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sServiceEventProcessor) OnUpdateCallCount() int {
	fake.onUpdateMutex.RLock()
	defer fake.onUpdateMutex.RUnlock()
	return len(fake.onUpdateArgsForCall)
}

func (fake *K8sServiceEventProcessor) OnUpdateCalls(stub func(context.Context, v1.Service) error) {
	fake.onUpdateMutex.Lock()
	defer fake.onUpdateMutex.Unlock()
	fake.OnUpdateStub = stub
}

func (fake *K8sServiceEventProcessor) OnUpdateArgsForCall(i int) (context.Context, v1.Service) {
	fake.onUpdateMutex.RLock()
	defer fake.onUpdateMutex.RUnlock()
	argsForCall := fake.onUpdateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *K8sServiceEventProcessor) OnUpdateReturns(result1 error) {
	fake.onUpdateMutex.Lock()
	defer fake.onUpdateMutex.Unlock()
	fake.OnUpdateStub = nil
	fake.onUpdateReturns = struct {
		result1 error
	}{result1}
}

func (fake *K8sServiceEventProcessor) OnUpdateReturnsOnCall(i int, result1 error) {
	fake.onUpdateMutex.Lock()
	defer fake.onUpdateMutex.Unlock()
	fake.OnUpdateStub = nil
	if fake.onUpdateReturnsOnCall == nil {
		fake.onUpdateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.onUpdateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *K8sServiceEventProcessor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *K8sServiceEventProcessor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.ServiceEventProcessor = new(K8sServiceEventProcessor)
