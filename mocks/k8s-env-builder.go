// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/k8s"
	v1 "k8s.io/api/core/v1"
)

type K8sEnvBuilder struct {
	AddStub        func(string, string) k8s.EnvBuilder
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 string
		arg2 string
	}
	addReturns struct {
		result1 k8s.EnvBuilder
	}
	addReturnsOnCall map[int]struct {
		result1 k8s.EnvBuilder
	}
	AddFieldRefStub        func(string, string, string) k8s.EnvBuilder
	addFieldRefMutex       sync.RWMutex
	addFieldRefArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	addFieldRefReturns struct {
		result1 k8s.EnvBuilder
	}
	addFieldRefReturnsOnCall map[int]struct {
		result1 k8s.EnvBuilder
	}
	AddSecretStub        func(string, string, string) k8s.EnvBuilder
	addSecretMutex       sync.RWMutex
	addSecretArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	addSecretReturns struct {
		result1 k8s.EnvBuilder
	}
	addSecretReturnsOnCall map[int]struct {
		result1 k8s.EnvBuilder
	}
	BuildStub        func(context.Context) ([]v1.EnvVar, error)
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		arg1 context.Context
	}
	buildReturns struct {
		result1 []v1.EnvVar
		result2 error
	}
	buildReturnsOnCall map[int]struct {
		result1 []v1.EnvVar
		result2 error
	}
	ValidateStub        func(context.Context) error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		arg1 context.Context
	}
	validateReturns struct {
		result1 error
	}
	validateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *K8sEnvBuilder) Add(arg1 string, arg2 string) k8s.EnvBuilder {
	fake.addMutex.Lock()
	ret, specificReturn := fake.addReturnsOnCall[len(fake.addArgsForCall)]
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.AddStub
	fakeReturns := fake.addReturns
	fake.recordInvocation("Add", []interface{}{arg1, arg2})
	fake.addMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sEnvBuilder) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *K8sEnvBuilder) AddCalls(stub func(string, string) k8s.EnvBuilder) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *K8sEnvBuilder) AddArgsForCall(i int) (string, string) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *K8sEnvBuilder) AddReturns(result1 k8s.EnvBuilder) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 k8s.EnvBuilder
	}{result1}
}

func (fake *K8sEnvBuilder) AddReturnsOnCall(i int, result1 k8s.EnvBuilder) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	if fake.addReturnsOnCall == nil {
		fake.addReturnsOnCall = make(map[int]struct {
			result1 k8s.EnvBuilder
		})
	}
	fake.addReturnsOnCall[i] = struct {
		result1 k8s.EnvBuilder
	}{result1}
}

func (fake *K8sEnvBuilder) AddFieldRef(arg1 string, arg2 string, arg3 string) k8s.EnvBuilder {
	fake.addFieldRefMutex.Lock()
	ret, specificReturn := fake.addFieldRefReturnsOnCall[len(fake.addFieldRefArgsForCall)]
	fake.addFieldRefArgsForCall = append(fake.addFieldRefArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AddFieldRefStub
	fakeReturns := fake.addFieldRefReturns
	fake.recordInvocation("AddFieldRef", []interface{}{arg1, arg2, arg3})
	fake.addFieldRefMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sEnvBuilder) AddFieldRefCallCount() int {
	fake.addFieldRefMutex.RLock()
	defer fake.addFieldRefMutex.RUnlock()
	return len(fake.addFieldRefArgsForCall)
}

func (fake *K8sEnvBuilder) AddFieldRefCalls(stub func(string, string, string) k8s.EnvBuilder) {
	fake.addFieldRefMutex.Lock()
	defer fake.addFieldRefMutex.Unlock()
	fake.AddFieldRefStub = stub
}

func (fake *K8sEnvBuilder) AddFieldRefArgsForCall(i int) (string, string, string) {
	fake.addFieldRefMutex.RLock()
	defer fake.addFieldRefMutex.RUnlock()
	argsForCall := fake.addFieldRefArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *K8sEnvBuilder) AddFieldRefReturns(result1 k8s.EnvBuilder) {
	fake.addFieldRefMutex.Lock()
	defer fake.addFieldRefMutex.Unlock()
	fake.AddFieldRefStub = nil
	fake.addFieldRefReturns = struct {
		result1 k8s.EnvBuilder
	}{result1}
}

func (fake *K8sEnvBuilder) AddFieldRefReturnsOnCall(i int, result1 k8s.EnvBuilder) {
	fake.addFieldRefMutex.Lock()
	defer fake.addFieldRefMutex.Unlock()
	fake.AddFieldRefStub = nil
	if fake.addFieldRefReturnsOnCall == nil {
		fake.addFieldRefReturnsOnCall = make(map[int]struct {
			result1 k8s.EnvBuilder
		})
	}
	fake.addFieldRefReturnsOnCall[i] = struct {
		result1 k8s.EnvBuilder
	}{result1}
}

func (fake *K8sEnvBuilder) AddSecret(arg1 string, arg2 string, arg3 string) k8s.EnvBuilder {
	fake.addSecretMutex.Lock()
	ret, specificReturn := fake.addSecretReturnsOnCall[len(fake.addSecretArgsForCall)]
	fake.addSecretArgsForCall = append(fake.addSecretArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AddSecretStub
	fakeReturns := fake.addSecretReturns
	fake.recordInvocation("AddSecret", []interface{}{arg1, arg2, arg3})
	fake.addSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sEnvBuilder) AddSecretCallCount() int {
	fake.addSecretMutex.RLock()
	defer fake.addSecretMutex.RUnlock()
	return len(fake.addSecretArgsForCall)
}

func (fake *K8sEnvBuilder) AddSecretCalls(stub func(string, string, string) k8s.EnvBuilder) {
	fake.addSecretMutex.Lock()
	defer fake.addSecretMutex.Unlock()
	fake.AddSecretStub = stub
}

func (fake *K8sEnvBuilder) AddSecretArgsForCall(i int) (string, string, string) {
	fake.addSecretMutex.RLock()
	defer fake.addSecretMutex.RUnlock()
	argsForCall := fake.addSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *K8sEnvBuilder) AddSecretReturns(result1 k8s.EnvBuilder) {
	fake.addSecretMutex.Lock()
	defer fake.addSecretMutex.Unlock()
	fake.AddSecretStub = nil
	fake.addSecretReturns = struct {
		result1 k8s.EnvBuilder
	}{result1}
}

func (fake *K8sEnvBuilder) AddSecretReturnsOnCall(i int, result1 k8s.EnvBuilder) {
	fake.addSecretMutex.Lock()
	defer fake.addSecretMutex.Unlock()
	fake.AddSecretStub = nil
	if fake.addSecretReturnsOnCall == nil {
		fake.addSecretReturnsOnCall = make(map[int]struct {
			result1 k8s.EnvBuilder
		})
	}
	fake.addSecretReturnsOnCall[i] = struct {
		result1 k8s.EnvBuilder
	}{result1}
}

func (fake *K8sEnvBuilder) Build(arg1 context.Context) ([]v1.EnvVar, error) {
	fake.buildMutex.Lock()
	ret, specificReturn := fake.buildReturnsOnCall[len(fake.buildArgsForCall)]
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.BuildStub
	fakeReturns := fake.buildReturns
	fake.recordInvocation("Build", []interface{}{arg1})
	fake.buildMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *K8sEnvBuilder) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *K8sEnvBuilder) BuildCalls(stub func(context.Context) ([]v1.EnvVar, error)) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = stub
}

func (fake *K8sEnvBuilder) BuildArgsForCall(i int) context.Context {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	argsForCall := fake.buildArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sEnvBuilder) BuildReturns(result1 []v1.EnvVar, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 []v1.EnvVar
		result2 error
	}{result1, result2}
}

func (fake *K8sEnvBuilder) BuildReturnsOnCall(i int, result1 []v1.EnvVar, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	if fake.buildReturnsOnCall == nil {
		fake.buildReturnsOnCall = make(map[int]struct {
			result1 []v1.EnvVar
			result2 error
		})
	}
	fake.buildReturnsOnCall[i] = struct {
		result1 []v1.EnvVar
		result2 error
	}{result1, result2}
}

func (fake *K8sEnvBuilder) Validate(arg1 context.Context) error {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ValidateStub
	fakeReturns := fake.validateReturns
	fake.recordInvocation("Validate", []interface{}{arg1})
	fake.validateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sEnvBuilder) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *K8sEnvBuilder) ValidateCalls(stub func(context.Context) error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = stub
}

func (fake *K8sEnvBuilder) ValidateArgsForCall(i int) context.Context {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	argsForCall := fake.validateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sEnvBuilder) ValidateReturns(result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 error
	}{result1}
}

func (fake *K8sEnvBuilder) ValidateReturnsOnCall(i int, result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *K8sEnvBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.addFieldRefMutex.RLock()
	defer fake.addFieldRefMutex.RUnlock()
	fake.addSecretMutex.RLock()
	defer fake.addSecretMutex.RUnlock()
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *K8sEnvBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.EnvBuilder = new(K8sEnvBuilder)
